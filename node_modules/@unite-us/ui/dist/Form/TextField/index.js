"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _autosize = _interopRequireDefault(require("autosize"));

var _lodash = require("lodash");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * TextField Component
 *
 */
var TextField = /*#__PURE__*/function (_Component) {
  _inherits(TextField, _Component);

  var _super = _createSuper(TextField);

  function TextField() {
    _classCallCheck(this, TextField);

    return _super.apply(this, arguments);
  }

  _createClass(TextField, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      (0, _autosize["default"])(this.textarea);
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this = this;

      if ((0, _utils.getPreferredProp)(this.props, 'value') !== (0, _utils.getPreferredProp)(nextProps, 'value') && (0, _utils.getPreferredProp)(nextProps, 'value')) {
        setTimeout(function () {
          _autosize["default"].update(_this.textarea);
        }, 50);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _autosize["default"].destroy(this.textarea);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          afterLabelContent = _this$props.afterLabelContent,
          autoFocus = _this$props.autoFocus,
          className = _this$props.className,
          labelClassName = _this$props.labelClassName,
          disabled = _this$props.disabled,
          hideLabel = _this$props.hideLabel,
          hint = _this$props.hint,
          id = _this$props.id,
          inline = _this$props.inline,
          label = _this$props.label,
          placeholder = _this$props.placeholder,
          required = _this$props.required,
          cols = _this$props.cols,
          rows = _this$props.rows,
          style = _this$props.style;
      var hasError = (0, _utils.getPreferredProp)(this.props, 'invalid') && (0, _utils.getPreferredProp)(this.props, 'touched');

      var containerClass = function containerClass() {
        return (0, _classnames["default"])({
          'ui-text-field': true,
          'ui-form-field': true,
          'ui-form-field--inline': inline,
          'ui-form-field--inline-text-field-inline': inline,
          'ui-form-field--has-error': hasError,
          'ui-form-field--disabled': disabled,
          'ui-text-field--has-error': hasError
        }, className);
      };

      var labelClass = function labelClass() {
        var _classNames;

        return (0, _classnames["default"])((_classNames = {
          'ui-form-field__label': true,
          'ui-form-field__label--text-field': inline,
          'ui-form-field__label--required': required
        }, _defineProperty(_classNames, labelClassName, !(0, _lodash.isEmpty)(labelClassName)), _defineProperty(_classNames, 'sr-only', hideLabel), _classNames));
      };

      var textareaWrapperClass = function textareaWrapperClass() {
        return (0, _classnames["default"])({
          'textarea-wrapper': true
        });
      };

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: containerClass(),
        style: style.container
      }, /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: id,
        className: labelClass(),
        style: style.label
      }, label), afterLabelContent, /*#__PURE__*/_react["default"].createElement("div", {
        className: textareaWrapperClass()
      }, /*#__PURE__*/_react["default"].createElement("textarea", {
        id: id,
        value: (0, _utils.getPreferredProp)(this.props, 'value'),
        onChange: (0, _utils.getPreferredProp)(this.props, 'onChange'),
        onBlur: (0, _utils.getPreferredProp)(this.props, 'onBlur'),
        onFocus: (0, _utils.getPreferredProp)(this.props, 'onFocus'),
        placeholder: placeholder,
        name: (0, _utils.getPreferredProp)(this.props, 'name'),
        disabled: disabled,
        autoFocus: autoFocus,
        style: style.text,
        cols: cols,
        rows: rows,
        ref: function ref(c) {
          _this2.textarea = c;
        }
      }), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-form-field__hint",
        style: style.hint
      }, hint), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-form-field__error",
        style: style.error
      }, (0, _utils.getPreferredProp)(this.props, 'error'))));
    }
  }]);

  return TextField;
}(_react.Component);

TextField.propTypes = _objectSpread({
  /** id for reference */
  id: _propTypes["default"].string.isRequired,

  /** className for reference */
  className: _propTypes["default"].string,

  /**
   * Override the inline-styles of the elements || **Not Recommended**
   * <br> ***note: currently overwritten by mysterious inline styles in `textarea`***
  */
  style: _propTypes["default"].shape({
    container: _propTypes["default"].object,
    label: _propTypes["default"].object,
    text: _propTypes["default"].object,
    hint: _propTypes["default"].object,
    error: _propTypes["default"].object
  }),

  /** label text for button */
  label: _propTypes["default"].node.isRequired,

  /** insert content after label */
  afterLabelContent: _propTypes["default"].node,

  /** Should the label be displayed inline with the input? */
  inline: _propTypes["default"].bool,

  /** Is the input disabled? */
  disabled: _propTypes["default"].bool,

  /** Placeholder text */
  placeholder: _propTypes["default"].string,

  /** Should the label be hidden? */
  hideLabel: _propTypes["default"].bool,

  /** Should the textfield be focused on load? */
  autoFocus: _propTypes["default"].bool,

  /** Help text displayed below the input */
  hint: _propTypes["default"].node,

  /** Is the field required */
  required: _propTypes["default"].bool,

  /** number of columns for text area */
  cols: _propTypes["default"].number,

  /** number of rows for text area */
  rows: _propTypes["default"].number
}, _utils.fieldProps);
TextField.defaultProps = {
  afterLabelContent: null,
  autoFocus: false,
  className: '',
  disabled: false,
  hideLabel: false,
  hint: '',
  inline: false,
  labelClassName: '',
  placeholder: '',
  required: false,
  cols: 50,
  rows: 4,
  style: {
    container: {},
    label: {},
    text: {},
    hint: {},
    error: {}
  }
};
var _default = TextField;
exports["default"] = _default;