"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _Icon = _interopRequireDefault(require("../../Display/Icon"));

var _Dates = require("../../utils/Dates");

var _Browser = require("../../utils/Browser");

var _utils = require("../utils");

var _Calendar = _interopRequireDefault(require("../Calendar"));

var _classNames = require("./classNames");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Dropdown = function Dropdown(props) {
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classNames.dropDownClass)(props.state)
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-date-field__controls"
  }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    icon: "IconChevronLeft",
    onClick: props.onPreviousMonth
  }), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", null, (0, _moment["default"])({
    month: props.state.month,
    year: props.state.year
  }).format('MMMM'), "\xA0"), /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: "".concat(props.id, "-year-input"),
    className: "sr-only"
  }, "Year"), /*#__PURE__*/_react["default"].createElement("input", {
    id: "".concat(props.id, "-year-input"),
    value: _lodash["default"].isNull(props.state.yearValue) ? props.state.year : props.state.yearValue,
    onChange: props.onEditYear
  })), /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    icon: "IconChevronRight",
    onClick: props.onNextMonth
  })), /*#__PURE__*/_react["default"].createElement(_Calendar["default"], {
    year: props.state.year,
    month: props.state.month,
    onDayClick: props.onDaySelect,
    selectedDays: [props.state.value],
    isUtc: props.isUtc,
    shouldDisableDay: function shouldDisableDay(day) {
      return (0, _Dates.shouldDisableDay)(day, props.maxDate, props.minDate, props.shouldDisableDate);
    }
  }));
};

Dropdown.propTypes = {
  id: _propTypes["default"].string.isRequired,
  isUtc: _propTypes["default"].bool.isRequired,
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),
  onDaySelect: _propTypes["default"].func.isRequired,
  onEditYear: _propTypes["default"].func.isRequired,
  onNextMonth: _propTypes["default"].func.isRequired,
  onPreviousMonth: _propTypes["default"].func.isRequired,
  shouldDisableDate: _propTypes["default"].func.isRequired,
  state: _propTypes["default"].object.isRequired
};
Dropdown.defaultProps = {
  maxDate: null,
  minDate: null
};

var DateField = /*#__PURE__*/function (_Component) {
  _inherits(DateField, _Component);

  var _super = _createSuper(DateField);

  function DateField(props) {
    var _this;

    _classCallCheck(this, DateField);

    _this = _super.call(this, props);
    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_this));
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));
    _this.onCalendarClick = _this.onCalendarClick.bind(_assertThisInitialized(_this));
    _this.onDaySelect = _this.onDaySelect.bind(_assertThisInitialized(_this));
    _this.onPreviousMonth = _this.onPreviousMonth.bind(_assertThisInitialized(_this));
    _this.onNextMonth = _this.onNextMonth.bind(_assertThisInitialized(_this));
    _this.onEditYear = _this.onEditYear.bind(_assertThisInitialized(_this));
    _this.getInputValue = _this.getInputValue.bind(_assertThisInitialized(_this));
    _this.isClickOutside = _this.isClickOutside.bind(_assertThisInitialized(_this));
    _this.validate = _this.validate.bind(_assertThisInitialized(_this));
    _this.triggerOnBlur = _this.triggerOnBlur.bind(_assertThisInitialized(_this));
    var value = (0, _Dates.momentizeValue)((0, _utils.getPreferredProp)(props, 'value'), props.dateFormat, props.isUtc);
    _this.state = {
      isOpen: false,
      value: value,
      inputValue: null,
      yearValue: null,
      year: value ? value.year() : (0, _moment["default"])().year(),
      month: value ? value.month() : (0, _moment["default"])().month()
    };
    return _this;
  }

  _createClass(DateField, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if ((0, _utils.getPreferredProp)(this.props, 'value') !== (0, _utils.getPreferredProp)(nextProps, 'value')) {
        var value = (0, _Dates.momentizeValue)((0, _utils.getPreferredProp)(nextProps, 'value'), nextProps.dateFormat, nextProps.isUtc);
        this.setState({
          value: value,
          year: value ? value.year() : (0, _moment["default"])().year(),
          month: value ? value.month() : (0, _moment["default"])().month()
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.isClickOutside, true);
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(e) {
      var value = _lodash["default"].get(e, 'target.value', '');

      if (this.props.useMask) {
        value = (0, _Dates.maskValue)(value, this.props.dateFormat);
      }

      this.setState({
        inputValue: value,
        isOpen: false
      });
    }
  }, {
    key: "onChange",
    value: function onChange(date) {
      if (!date) {
        return (0, _utils.getPreferredProp)(this.props, 'onChange')('');
      }

      var value = this.props.isUtc ? _moment["default"].utc((0, _moment["default"])(date).format(this.props.dateFormat), this.props.dateFormat) : (0, _moment["default"])(date);

      if (_lodash["default"].isFunction(this.props.valueFormat)) {
        return (0, _utils.getPreferredProp)(this.props, 'onChange')(this.props.valueFormat(value));
      }

      return (0, _utils.getPreferredProp)(this.props, 'onChange')(value.format(this.props.valueFormat));
    }
  }, {
    key: "onBlur",
    value: function onBlur(e) {
      var _this2 = this;

      if (e.target.value.length < 3) {
        this.setState({
          inputValue: null,
          value: null
        });
        this.onChange('');
        this.triggerOnBlur();
        return;
      }

      if (!_lodash["default"].isNull(this.state.inputValue)) {
        var value = (0, _Dates.momentizeValue)(e.target.value, this.props.dateFormat, this.props.isUtc);
        this.setState({
          inputValue: null,
          value: value,
          year: value ? value.year() : (0, _moment["default"])().year(),
          month: value ? value.month() : (0, _moment["default"])().month()
        }, function () {
          return _this2.onChange(value);
        });
      }

      this.triggerOnBlur();
    }
  }, {
    key: "onCalendarClick",
    value: function onCalendarClick() {
      var _this3 = this;

      this.setState({
        isOpen: !this.state.isOpen
      }, function () {
        if (_this3.state.isOpen) {
          document.addEventListener('click', _this3.isClickOutside, true);
        } else {
          document.removeEventListener('click', _this3.isClickOutside, true);
        }
      });
    }
  }, {
    key: "onDaySelect",
    value: function onDaySelect(day) {
      var _this4 = this;

      var value = this.props.isUtc ? day.utc() : day;
      this.setState({
        isOpen: false,
        value: value,
        year: value ? value.year() : (0, _moment["default"])().year(),
        month: value ? value.month() : (0, _moment["default"])().month()
      }, function () {
        document.removeEventListener('click', _this4.isClickOutside, true);

        _this4.onChange(day);
      });
    }
  }, {
    key: "onPreviousMonth",
    value: function onPreviousMonth() {
      var prev = (0, _moment["default"])({
        month: this.state.month,
        year: this.state.year
      }).subtract(1, 'month');
      this.setState({
        month: prev.month(),
        year: prev.year(),
        isOpen: true
      });
    }
  }, {
    key: "onNextMonth",
    value: function onNextMonth() {
      var next = (0, _moment["default"])({
        month: this.state.month,
        year: this.state.year
      }).add(1, 'month');
      this.setState({
        month: next.month(),
        year: next.year(),
        isOpen: true
      });
    }
  }, {
    key: "onEditYear",
    value: function onEditYear(e) {
      var _this5 = this;

      var value = _lodash["default"].slice(e.target.value, 0, 4).toString().replace(/\D/g, '');

      this.setState({
        yearValue: value
      }, function () {
        if (value && value.length === 4) {
          _this5.setState({
            year: parseInt(value, 10),
            yearValue: null
          });
        }
      });
    }
  }, {
    key: "getInputValue",
    value: function getInputValue() {
      if (_lodash["default"].isNil(this.state.inputValue)) {
        if (this.state.value) {
          return this.state.value.format(this.props.dateFormat);
        }

        return '';
      }

      return this.state.inputValue;
    }
  }, {
    key: "isClickOutside",
    value: function isClickOutside(e) {
      var _this6 = this;

      if (!_lodash["default"].includes((0, _Browser.getPropagationPath)(e), this.element)) {
        this.setState({
          isOpen: false
        }, function () {
          if (_lodash["default"].isFunction((0, _utils.getPreferredProp)(_this6.props, 'onBlur'))) {
            (0, _utils.getPreferredProp)(_this6.props, 'onBlur')();
          }

          document.removeEventListener('click', _this6.isClickOutside, true);
        });
      }
    }
  }, {
    key: "triggerOnBlur",
    value: function triggerOnBlur() {
      var propsOnBlur = (0, _utils.getPreferredProp)(this.props, 'onBlur');

      if (_lodash["default"].isFunction(propsOnBlur)) {
        propsOnBlur();
      }
    }
  }, {
    key: "validate",
    value: function validate(value) {
      var _this$props = this.props,
          maxDate = _this$props.maxDate,
          minDate = _this$props.minDate,
          customErrorMessage = _this$props.customErrorMessage,
          shouldDisableDate = _this$props.shouldDisableDate,
          dateFormat = _this$props.dateFormat,
          isUtc = _this$props.isUtc;
      var date = (0, _Dates.momentizeValue)(value, dateFormat, isUtc);
      return (0, _Dates.validateDate)(date, maxDate, minDate, shouldDisableDate, dateFormat, customErrorMessage);
    }
  }, {
    key: "render",
    value: function render() {
      var _this7 = this;

      var _this$props2 = this.props,
          dateFormat = _this$props2.dateFormat,
          disabled = _this$props2.disabled,
          hint = _this$props2.hint,
          id = _this$props2.id,
          isUtc = _this$props2.isUtc,
          label = _this$props2.label,
          maxDate = _this$props2.maxDate,
          minDate = _this$props2.minDate,
          placeholder = _this$props2.placeholder,
          shouldDisableDate = _this$props2.shouldDisableDate,
          style = _this$props2.style;
      var hasError = (0, _utils.getPreferredProp)(this.props, 'invalid') && (0, _utils.getPreferredProp)(this.props, 'touched') || this.state.value && !this.state.value.isValid();
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classNames.containerClass)(_objectSpread(_objectSpread({}, this.props), {}, {
          hasError: hasError
        }), this.state),
        style: style.container,
        ref: function ref(c) {
          _this7.element = c;
        }
      }, /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: id,
        className: (0, _classNames.labelClass)(this.props),
        style: style.label
      }, label), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("input", {
        id: id,
        value: this.getInputValue(),
        onChange: this.onInputChange,
        onBlur: this.onBlur,
        onFocus: (0, _utils.getPreferredProp)(this.props, 'onFocus'),
        placeholder: placeholder || dateFormat,
        name: (0, _utils.getPreferredProp)(this.props, 'name'),
        disabled: disabled,
        type: "text",
        style: style.input
      }), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-date-field__calendar-icon"
      }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
        icon: "IconCalendar",
        onClick: this.onCalendarClick,
        disabled: disabled || this.state.value && !this.state.value.isValid()
      })), /*#__PURE__*/_react["default"].createElement(Dropdown, {
        isUtc: isUtc,
        maxDate: maxDate,
        minDate: minDate,
        onDaySelect: this.onDaySelect,
        onEditYear: this.onEditYear,
        onNextMonth: this.onNextMonth,
        onPreviousMonth: this.onPreviousMonth,
        shouldDisableDate: shouldDisableDate,
        state: this.state,
        id: id
      }), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-form-field__hint",
        style: style.hint
      }, hint), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-form-field__error",
        style: style.error
      }, (0, _utils.getPreferredProp)(this.props, 'error'))));
    }
  }]);

  return DateField;
}(_react.Component);
/**
 * disable no-unused-prop-types handled by utility functions
*/


DateField.propTypes = _objectSpread({
  /** id for reference */
  id: _propTypes["default"].string.isRequired,

  /** className for reference */
  className: _propTypes["default"].string,
  // eslint-disable-line react/no-unused-prop-types

  /** Override the inline-styles of the elements || **Not Recommended** */
  style: _propTypes["default"].shape({
    container: _propTypes["default"].object,
    label: _propTypes["default"].object,
    input: _propTypes["default"].object,
    hint: _propTypes["default"].object,
    error: _propTypes["default"].object
  }),

  /** label text for button */
  label: _propTypes["default"].node.isRequired,

  /** Should the label be displayed inline with the input? */
  inline: _propTypes["default"].bool,
  // eslint-disable-line react/no-unused-prop-types

  /** Is the input disabled? */
  disabled: _propTypes["default"].bool,

  /** Placeholder text */
  placeholder: _propTypes["default"].string,

  /** Should the label be hidden? */
  hideLabel: _propTypes["default"].bool,
  // eslint-disable-line react/no-unused-prop-types

  /** Help text displayed below the input */
  hint: _propTypes["default"].node,

  /** Is the field required */
  required: _propTypes["default"].bool,
  // eslint-disable-line react/no-unused-prop-types

  /** How the date should be formated in the input */
  dateFormat: _propTypes["default"].string,

  /**
   * Specify the value format you want
   * @param date:moment
   */
  valueFormat: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),

  /** Should the component work with UTC moment? */
  isUtc: _propTypes["default"].bool,

  /** Max permitted date */
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),

  /** Min permitted date */
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object, _propTypes["default"].number]),

  /**
   * Should this date be disabled?
   * @param date:moment
   */
  shouldDisableDate: _propTypes["default"].func,

  /** Should the input use the mask according to the dateFormat? */
  useMask: _propTypes["default"].bool
}, _utils.fieldProps);
DateField.defaultProps = {
  className: '',
  disabled: false,
  hideLabel: false,
  hint: '',
  inline: false,
  labelClassName: '',
  name: '',
  placeholder: '',
  required: false,
  style: {
    container: {},
    label: {},
    input: {},
    hint: {},
    error: {}
  },
  dateFormat: 'MM/DD/YYYY',
  valueFormat: _Dates.convertToUnixTimestamp,
  isUtc: true,
  maxDate: null,
  minDate: null,
  customErrorMessage: '',
  shouldDisableDate: function shouldDisableDate() {
    return false;
  },
  useMask: true
};
var _default = DateField;
exports["default"] = _default;