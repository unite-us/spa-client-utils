"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash"));

var _moment = _interopRequireDefault(require("moment"));

var _Icon = _interopRequireDefault(require("../../Display/Icon"));

var _utils = require("../utils");

var _Dates = require("../../utils/Dates");

var _Browser = require("../../utils/Browser");

var _Calendar = _interopRequireDefault(require("../Calendar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DurationField = /*#__PURE__*/function (_Component) {
  _inherits(DurationField, _Component);

  var _super = _createSuper(DurationField);

  function DurationField(props) {
    var _this;

    _classCallCheck(this, DurationField);

    _this = _super.call(this, props);
    _this.onCalendarClick = _this.onCalendarClick.bind(_assertThisInitialized(_this));
    _this.onInputChange = _this.onInputChange.bind(_assertThisInitialized(_this));
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.onBlur = _this.onBlur.bind(_assertThisInitialized(_this));
    _this.onDaySelect = _this.onDaySelect.bind(_assertThisInitialized(_this));
    _this.onPreviousMonth = _this.onPreviousMonth.bind(_assertThisInitialized(_this));
    _this.onNextMonth = _this.onNextMonth.bind(_assertThisInitialized(_this));
    _this.onEditYear = _this.onEditYear.bind(_assertThisInitialized(_this));
    _this.onFakeInputKeyPress = _this.onFakeInputKeyPress.bind(_assertThisInitialized(_this));
    _this.getFormatedRange = _this.getFormatedRange.bind(_assertThisInitialized(_this));
    _this.isClickOutside = _this.isClickOutside.bind(_assertThisInitialized(_this));
    _this.validate = _this.validate.bind(_assertThisInitialized(_this));
    var startValue = (0, _Dates.momentizeValue)((0, _utils.getPreferredProp)(props, 'value', props.startFieldPath), props.dateFormat, props.isUtc);
    var endValue = (0, _Dates.momentizeValue)((0, _utils.getPreferredProp)(props, 'value', props.endFieldPath), props.dateFormat, props.isUtc);
    _this.state = {
      isOpen: false,
      startValue: startValue,
      endValue: endValue,
      startInputValue: null,
      endInputValue: null,
      yearValue: null,
      year: startValue && startValue.isValid() ? startValue.year() : (0, _moment["default"])().year(),
      month: startValue && startValue.isValid() ? startValue.month() : (0, _moment["default"])().month()
    };
    return _this;
  }

  _createClass(DurationField, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this$props = this.props,
          startFieldPath = _this$props.startFieldPath,
          endFieldPath = _this$props.endFieldPath;

      if ((0, _utils.getPreferredProp)(this.props, 'value', startFieldPath) !== (0, _utils.getPreferredProp)(nextProps, 'value', startFieldPath)) {
        var value = (0, _Dates.momentizeValue)((0, _utils.getPreferredProp)(nextProps, 'value', startFieldPath), nextProps.dateFormat, nextProps.isUtc);
        this.setState({
          startValue: value,
          year: value ? value.year() : (0, _moment["default"])().year(),
          month: value ? value.month() : (0, _moment["default"])().month()
        });
      }

      if ((0, _utils.getPreferredProp)(this.props, 'value', endFieldPath) !== (0, _utils.getPreferredProp)(nextProps, 'value', endFieldPath)) {
        var _value = (0, _Dates.momentizeValue)((0, _utils.getPreferredProp)(nextProps, 'value', endFieldPath), nextProps.dateFormat, nextProps.isUtc);

        this.setState({
          endValue: _value
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.isClickOutside);
    }
  }, {
    key: "onCalendarClick",
    value: function onCalendarClick(e) {
      var _this2 = this;

      e.preventDefault();
      this.setState({
        isOpen: !this.state.isOpen
      }, function () {
        if (_this2.state.isOpen) {
          document.addEventListener('click', _this2.isClickOutside);
        } else {
          document.removeEventListener('click', _this2.isClickOutside);
        }
      });
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(e, path) {
      var value = _lodash["default"].get(e, 'target.value', '');

      if (this.props.useMask) {
        value = (0, _Dates.maskValue)(value, this.props.dateFormat);
      }

      this.setState(_defineProperty({}, "".concat(path, "InputValue"), value));
    }
  }, {
    key: "onChange",
    value: function onChange() {
      var startValue = this.state.startValue;
      var endValue = this.state.endValue;
      var _this$props2 = this.props,
          startFieldPath = _this$props2.startFieldPath,
          endFieldPath = _this$props2.endFieldPath;

      if (startValue && endValue && startValue.isAfter(endValue)) {
        startValue = this.state.endValue;
        endValue = this.state.startValue;
      }

      if (this.props.isUtc) {
        startValue = startValue && _moment["default"].utc(startValue.format(this.props.dateFormat), this.props.dateFormat);
        endValue = endValue && _moment["default"].utc(endValue.format(this.props.dateFormat), this.props.dateFormat);
      }

      if (_lodash["default"].isFunction(this.props.valueFormat)) {
        (0, _utils.getPreferredProp)(this.props, 'onChange', startFieldPath)(startValue ? this.props.valueFormat(startValue) : '');
        (0, _utils.getPreferredProp)(this.props, 'onChange', endFieldPath)(endValue ? this.props.valueFormat(endValue) : '');
      } else {
        (0, _utils.getPreferredProp)(this.props, 'onChange', startFieldPath)(startValue ? startValue.format(this.props.valueFormat) : '');
        (0, _utils.getPreferredProp)(this.props, 'onChange', endFieldPath)(endValue ? endValue.format(this.props.valueFormat) : '');
      }
    }
  }, {
    key: "onBlur",
    value: function onBlur(e, path) {
      if (e.target.value.length < 3) {
        this.setState(_defineProperty({}, "".concat(path, "InputValue"), null));
        return;
      }

      var oldValue = _lodash["default"].get(this.state, "".concat(path, "InputValue"), null);

      var fieldPath = _lodash["default"].get(this.props, "".concat(path, "FieldPath"), null);

      if (!_lodash["default"].isNull(oldValue)) {
        var _this$setState3;

        var value = (0, _Dates.momentizeValue)(e.target.value, this.props.dateFormat, this.props.isUtc);
        this.setState((_this$setState3 = {}, _defineProperty(_this$setState3, "".concat(path, "InputValue"), null), _defineProperty(_this$setState3, "".concat(path, "Value"), value), _defineProperty(_this$setState3, "year", value && value.isValid() ? value.year() : (0, _moment["default"])().year()), _defineProperty(_this$setState3, "month", value && value.isValid() ? value.month() : (0, _moment["default"])().month()), _this$setState3), this.onChange);
      }

      if (_lodash["default"].isFunction((0, _utils.getPreferredProp)(this.props, 'onBlur', fieldPath))) {
        (0, _utils.getPreferredProp)(this.props, 'onBlur', fieldPath)();
      }
    }
  }, {
    key: "onDaySelect",
    value: function onDaySelect(day, secondary) {
      var _this3 = this;

      var value = this.props.isUtc ? day.utc() : day;
      var _this$props3 = this.props,
          startFieldPath = _this$props3.startFieldPath,
          endFieldPath = _this$props3.endFieldPath;
      var startValue = this.state.startValue;
      var endValue = this.state.endValue;
      var stayOpen = true;
      var year = this.state.year;
      var month = this.state.month;

      if (!secondary) {
        year = value && value.isValid() ? value.year() : (0, _moment["default"])().year();
        month = value && value.isValid() ? value.month() : (0, _moment["default"])().month();
      }

      if (this.state.startValue && !this.state.endValue) {
        startValue = this.state.startValue;
        endValue = day;
        stayOpen = false;
      } else {
        startValue = day;
        endValue = null;
      }

      this.setState({
        isOpen: stayOpen,
        startValue: startValue,
        endValue: endValue,
        year: year,
        month: month
      }, function () {
        if (!stayOpen) {
          if (_lodash["default"].isFunction((0, _utils.getPreferredProp)(_this3.props, 'onBlur', startFieldPath))) {
            (0, _utils.getPreferredProp)(_this3.props, 'onBlur', startFieldPath)();
          }

          if (_lodash["default"].isFunction((0, _utils.getPreferredProp)(_this3.props, 'onBlur', endFieldPath))) {
            (0, _utils.getPreferredProp)(_this3.props, 'onBlur', endFieldPath)();
          }

          document.removeEventListener('click', _this3.isClickOutside);
        }

        _this3.onChange();
      });
    }
  }, {
    key: "onPreviousMonth",
    value: function onPreviousMonth() {
      var prev = (0, _moment["default"])({
        month: this.state.month,
        year: this.state.year
      }).subtract(1, 'month');
      this.setState({
        month: prev.month(),
        year: prev.year()
      });
    }
  }, {
    key: "onNextMonth",
    value: function onNextMonth() {
      var next = (0, _moment["default"])({
        month: this.state.month,
        year: this.state.year
      }).add(1, 'month');
      this.setState({
        month: next.month(),
        year: next.year()
      });
    }
  }, {
    key: "onEditYear",
    value: function onEditYear(e) {
      var _this4 = this;

      var value = _lodash["default"].slice(e.target.value, 0, 4).toString().replace(/\D/g, '');

      this.setState({
        yearValue: value
      }, function () {
        if (value && value.length === 4) {
          _this4.setState({
            year: parseInt(value, 10),
            yearValue: null
          });
        }
      });
    }
  }, {
    key: "onFakeInputKeyPress",
    value: function onFakeInputKeyPress(e) {
      e.preventDefault();

      if (e.charCode === 13 || e.charCode === 32) {
        this.onCalendarClick(e);
      }
    }
  }, {
    key: "getFormatedRange",
    value: function getFormatedRange() {
      var dateFormat = this.props.dateFormat;
      var start = this.state.startValue ? this.state.startValue.format(dateFormat) : null;
      var end = this.state.endValue ? this.state.endValue.format(dateFormat) : null;
      var separator = this.state.startValue || this.state.endValue ? this.props.separator : null;
      return _lodash["default"].compact([start, separator, end]).join(' ');
    }
  }, {
    key: "getInputValue",
    value: function getInputValue(path) {
      var value = _lodash["default"].get(this.state, "".concat(path, "Value"), null);

      var inputValue = _lodash["default"].get(this.state, "".concat(path, "InputValue"), null);

      if (_lodash["default"].isNil(inputValue)) {
        if (value) {
          return value.format(this.props.dateFormat);
        }

        return '';
      }

      return inputValue;
    }
  }, {
    key: "isClickOutside",
    value: function isClickOutside(e) {
      var _this5 = this;

      var _this$props4 = this.props,
          startFieldPath = _this$props4.startFieldPath,
          endFieldPath = _this$props4.endFieldPath;

      if (!_lodash["default"].includes((0, _Browser.getPropagationPath)(e), this.element)) {
        this.setState({
          isOpen: false
        }, function () {
          if (_lodash["default"].isFunction((0, _utils.getPreferredProp)(_this5.props, 'onBlur', startFieldPath))) {
            (0, _utils.getPreferredProp)(_this5.props, 'onBlur', startFieldPath)();
          }

          if (_lodash["default"].isFunction((0, _utils.getPreferredProp)(_this5.props, 'onBlur', endFieldPath))) {
            (0, _utils.getPreferredProp)(_this5.props, 'onBlur', endFieldPath)();
          }

          document.removeEventListener('click', _this5.isClickOutside);
        });
      }
    }
  }, {
    key: "validate",
    value: function validate(value) {
      var _this$props5 = this.props,
          maxDate = _this$props5.maxDate,
          minDate = _this$props5.minDate,
          shouldDisableDate = _this$props5.shouldDisableDate,
          dateFormat = _this$props5.dateFormat,
          isUtc = _this$props5.isUtc;
      var date = (0, _Dates.momentizeValue)(value, dateFormat, isUtc);
      return (0, _Dates.validateDate)(date, maxDate, minDate, shouldDisableDate, dateFormat);
    }
  }, {
    key: "render",
    value: function render() {
      var _this6 = this;

      var _this$props6 = this.props,
          className = _this$props6.className,
          labelClassName = _this$props6.labelClassName,
          dateFormat = _this$props6.dateFormat,
          disabled = _this$props6.disabled,
          endField = _this$props6.endField,
          hideLabel = _this$props6.hideLabel,
          hint = _this$props6.hint,
          id = _this$props6.id,
          inline = _this$props6.inline,
          isUtc = _this$props6.isUtc,
          label = _this$props6.label,
          maxDate = _this$props6.maxDate,
          minDate = _this$props6.minDate,
          placeholder = _this$props6.placeholder,
          required = _this$props6.required,
          shouldDisableDate = _this$props6.shouldDisableDate,
          startField = _this$props6.startField,
          style = _this$props6.style,
          name = _this$props6.name,
          startFieldPath = _this$props6.startFieldPath,
          endFieldPath = _this$props6.endFieldPath;
      var fields = [startField, endField];
      var fieldPaths = [startFieldPath, endFieldPath];
      var hasError = _lodash["default"].every(fields, function (field, index) {
        return (0, _utils.getPreferredProp)(_this6.props, 'touched', fieldPaths[index]);
      }) && (_lodash["default"].some(fields, function (field, index) {
        return (0, _utils.getPreferredProp)(_this6.props, 'invalid', fieldPaths[index]);
      }) || this.state.startValue && !this.state.startValue.isValid() || this.state.endValue && !this.state.endValue.isValid());
      var nextMonth = (0, _moment["default"])({
        year: this.state.year,
        month: this.state.month
      }).add(1, 'month');

      var containerClass = function containerClass() {
        return (0, _classnames["default"])({
          'ui-duration-field': true,
          'ui-form-field': true,
          'ui-form-field--inline': inline,
          'ui-form-field--has-error': hasError,
          'ui-form-field--disabled': disabled,
          'ui-duration-field--has-error': hasError,
          'ui-duration-field--droptdown-open': _this6.state.isOpen
        }, className);
      };

      var labelClass = function labelClass() {
        var _classNames;

        return (0, _classnames["default"])((_classNames = {
          'ui-form-field__label': true,
          'ui-form-field__label--required': required
        }, _defineProperty(_classNames, labelClassName, !_lodash["default"].isEmpty(labelClassName)), _defineProperty(_classNames, 'sr-only', hideLabel), _classNames));
      };

      var dropDownClass = function dropDownClass() {
        return (0, _classnames["default"])({
          'ui-duration-field__dropdown': true,
          'ui-duration-field__dropdown--open': _this6.state.isOpen
        });
      };

      return /*#__PURE__*/_react["default"].createElement("div", {
        className: containerClass(),
        style: style.container,
        ref: function ref(c) {
          _this6.element = c;
        }
      }, /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: id,
        className: labelClass(),
        style: style.label
      }, label), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("button", {
        id: id,
        className: "ui-duration-field__fake-input",
        onClick: this.onCalendarClick,
        disabled: disabled,
        onKeyPress: this.onFakeInputKeyPress
      }, this.getFormatedRange()), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-date-field__calendar-icon"
      }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
        icon: "IconCalendar",
        disabled: disabled || this.state.startValue && !this.state.startValue.isValid(),
        onClick: this.onCalendarClick
      })), /*#__PURE__*/_react["default"].createElement("div", {
        className: dropDownClass()
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-duration-field__inputs"
      }, /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: "".concat(id, "-start"),
        className: "sr-only"
      }, "Start Date"), /*#__PURE__*/_react["default"].createElement("input", {
        id: "".concat(id, "-start"),
        value: this.getInputValue('start'),
        onChange: function onChange(e) {
          return _this6.onInputChange(e, 'start');
        },
        onBlur: function onBlur(e) {
          return _this6.onBlur(e, 'start');
        },
        onFocus: (0, _utils.getPreferredProp)(this.props, 'onFocus', startFieldPath),
        placeholder: placeholder || dateFormat,
        name: "".concat(name, "-start"),
        disabled: disabled,
        type: "text",
        style: style.input
      }), /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: "".concat(id, "-end"),
        className: "sr-only"
      }, "End Date"), /*#__PURE__*/_react["default"].createElement("input", {
        id: "".concat(id, "-end"),
        value: this.getInputValue('end'),
        onChange: function onChange(e) {
          return _this6.onInputChange(e, 'end');
        },
        onBlur: function onBlur(e) {
          return _this6.onBlur(e, 'end');
        },
        onFocus: (0, _utils.getPreferredProp)(this.props, 'onFocus', endFieldPath),
        placeholder: placeholder || dateFormat,
        name: "".concat(name, "-end"),
        disabled: disabled,
        type: "text",
        style: style.input
      })), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-duration-field__controls"
      }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
        icon: "IconChevronLeft",
        onClick: this.onPreviousMonth
      }), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", null, (0, _moment["default"])({
        month: this.state.month,
        year: this.state.year
      }).format('MMMM'), "\xA0"), /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: "".concat(id, "-start-year"),
        className: "sr-only"
      }, "Start Year"), /*#__PURE__*/_react["default"].createElement("input", {
        id: "".concat(id, "-start-year"),
        value: _lodash["default"].isNull(this.state.yearValue) ? this.state.year : this.state.yearValue,
        onChange: this.onEditYear
      })), /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("span", null, (0, _moment["default"])({
        month: nextMonth.month(),
        year: nextMonth.year()
      }).format('MMMM'), "\xA0"), /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: "".concat(id, "-end-year"),
        className: "sr-only"
      }, "End Year"), /*#__PURE__*/_react["default"].createElement("input", {
        id: "".concat(id, "-end-year"),
        value: _lodash["default"].isNull(this.state.yearValue) ? nextMonth.year() : this.state.yearValue,
        onChange: this.onEditYear
      })), /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
        icon: "IconChevronRight",
        onClick: this.onNextMonth
      })), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-duration-field__calendars"
      }, /*#__PURE__*/_react["default"].createElement(_Calendar["default"], {
        year: this.state.year,
        month: this.state.month,
        onDayClick: this.onDaySelect,
        dateRange: {
          start: this.state.startValue,
          end: this.state.endValue
        },
        isUtc: isUtc,
        shouldDisableDay: function shouldDisableDay(day) {
          return (0, _Dates.shouldDisableDay)(day, maxDate, minDate, shouldDisableDate);
        }
      }), /*#__PURE__*/_react["default"].createElement(_Calendar["default"], {
        year: nextMonth.year(),
        month: nextMonth.month(),
        onDayClick: function onDayClick(day) {
          return _this6.onDaySelect(day, true);
        },
        dateRange: {
          start: this.state.startValue,
          end: this.state.endValue
        },
        isUtc: isUtc,
        shouldDisableDay: function shouldDisableDay(day) {
          return (0, _Dates.shouldDisableDay)(day, maxDate, minDate, shouldDisableDate);
        }
      }))), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-form-field__hint",
        style: style.hint
      }, hint), /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-form-field__error",
        style: style.error
      }, (0, _utils.getPreferredProp)(this.props, 'error', startFieldPath), (0, _utils.getPreferredProp)(this.props, 'error', endFieldPath))));
    }
  }]);

  return DurationField;
}(_react.Component);

DurationField.propTypes = {
  /** id for reference */
  id: _propTypes["default"].string.isRequired,

  /** className for reference */
  className: _propTypes["default"].string,
  labelClassName: _propTypes["default"].string,

  /** Override the inline-styles of the elements || **Not Recommended** */
  style: _propTypes["default"].shape({
    container: _propTypes["default"].object,
    label: _propTypes["default"].object,
    input: _propTypes["default"].object,
    hint: _propTypes["default"].object,
    error: _propTypes["default"].object
  }),

  /** label text for button */
  label: _propTypes["default"].string.isRequired,

  /** Input name */
  name: _propTypes["default"].string,

  /** Should the label be displayed inline with the input? */
  inline: _propTypes["default"].bool,

  /** Is the input disabled? */
  disabled: _propTypes["default"].bool,

  /** Placeholder text */
  placeholder: _propTypes["default"].string,

  /** Should the label be hidden? */
  hideLabel: _propTypes["default"].bool,

  /** Help text displayed below the input */
  hint: _propTypes["default"].node,

  /** Is the field required */
  required: _propTypes["default"].bool,

  /** How the date should be formated in the input */
  dateFormat: _propTypes["default"].string,

  /** String between the two Dates */
  separator: _propTypes["default"].string,

  /**
   * Specify the value format you want
   * @param date:moment
   */
  valueFormat: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),

  /** Should the component work with UTC moment? */
  isUtc: _propTypes["default"].bool,

  /** Max permitted date */
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),

  /** Min permitted date */
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),

  /**
   * Should this date be disabled?
   * @param date:moment
   */
  shouldDisableDate: _propTypes["default"].func,

  /** See fieldProps doc */
  startField: _propTypes["default"].object,

  /** See fieldProps doc */
  endField: _propTypes["default"].object,

  /** Should the input use the mask according to the dateFormat? */
  useMask: _propTypes["default"].bool,

  /** if the Field is on a different path than props.startField */
  startFieldPath: _propTypes["default"].string,

  /** if the Field is on a different path than props.endField */
  endFieldPath: _propTypes["default"].string
};
DurationField.defaultProps = {
  className: '',
  disabled: false,
  hideLabel: false,
  hint: '',
  inline: false,
  labelClassName: '',
  name: '',
  placeholder: '',
  required: false,
  style: {
    container: {},
    label: {},
    input: {},
    hint: {},
    error: {}
  },
  dateFormat: 'MM/DD/YYYY',
  valueFormat: _Dates.convertToUnixTimestamp,
  isUtc: true,
  maxDate: null,
  minDate: null,
  shouldDisableDate: function shouldDisableDate() {
    return false;
  },
  separator: '-',
  useMask: true,
  startField: {},
  endField: {},
  startFieldPath: 'startField',
  endFieldPath: 'endField'
};
var _default = DurationField;
exports["default"] = _default;