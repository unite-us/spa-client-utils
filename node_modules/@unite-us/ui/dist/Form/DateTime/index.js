"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

var _utils = require("../utils");

var _index = _interopRequireDefault(require("../SelectField/index"));

var _index2 = _interopRequireDefault(require("../DateField/index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var hoursSelectionOptions = _toConsumableArray(Array(12).keys()).map(function (hour) {
  return {
    label: (hour + 1).toString().length === 1 ? "0".concat((hour + 1).toString()) : (hour + 1).toString(),
    value: (hour + 1).toString()
  };
});

var minutesSelectionOptions = _toConsumableArray(Array(60).keys()).map(function (minute) {
  return {
    label: minute.toString().length === 1 ? "0".concat(minute.toString()) : minute.toString(),
    value: minute.toString()
  };
});

var AmOrPm = [{
  label: 'am',
  value: 'am'
}, {
  label: 'pm',
  value: 'pm'
}];

var DateTime = /*#__PURE__*/_react["default"].forwardRef(function (props, ref) {
  var epoch = props.field.initialValue;
  var newDate = '';
  var initialYear = '';
  var initialMonth = '';
  var initialDay = '';
  var initialHour = '';
  var initialMinute = '';
  var initialAmPm = '';

  if ((0, _lodash.isNumber)(epoch)) {
    newDate = new Date(epoch * 1000);
    initialHour = newDate.getUTCHours();

    if (initialHour === 12) {
      initialAmPm = 'pm';
    } else if (initialHour > 12) {
      initialHour -= 12;
      initialAmPm = 'pm';
    } else if (initialHour === 0) {
      initialAmPm = 'am';
      initialHour = 12;
    } else {
      initialAmPm = 'am';
    }

    initialHour = initialHour.toString();
    initialMinute = newDate.getUTCMinutes().toString();
    initialYear = newDate.getUTCFullYear().toString();
    initialMonth = newDate.getUTCMonth().toString();
    initialDay = newDate.getUTCDate().toString();
  }

  var _useState = (0, _react.useState)(initialYear),
      _useState2 = _slicedToArray(_useState, 2),
      year = _useState2[0],
      setYear = _useState2[1];

  var _useState3 = (0, _react.useState)(initialMonth),
      _useState4 = _slicedToArray(_useState3, 2),
      month = _useState4[0],
      setMonth = _useState4[1];

  var _useState5 = (0, _react.useState)(initialDay),
      _useState6 = _slicedToArray(_useState5, 2),
      day = _useState6[0],
      setDay = _useState6[1];

  var _useState7 = (0, _react.useState)(initialHour),
      _useState8 = _slicedToArray(_useState7, 2),
      hours = _useState8[0],
      setHour = _useState8[1];

  var _useState9 = (0, _react.useState)(initialMinute),
      _useState10 = _slicedToArray(_useState9, 2),
      minutes = _useState10[0],
      setMinute = _useState10[1];

  var _useState11 = (0, _react.useState)(initialAmPm),
      _useState12 = _slicedToArray(_useState11, 2),
      amPm = _useState12[0],
      setAmPm = _useState12[1];

  var initialDateValue = newDate !== '' ? new Date(Date.UTC(year, month, day)) : newDate;

  var _useState13 = (0, _react.useState)(initialDateValue),
      _useState14 = _slicedToArray(_useState13, 2),
      dateFieldValue = _useState14[0],
      setDateFieldValue = _useState14[1];

  var dateField = (0, _react.useRef)(null);
  var inline = props.inline,
      disabled = props.disabled,
      className = props.className,
      clearable = props.clearable,
      id = props.id,
      label = props.label,
      maxDate = props.maxDate,
      minDate = props.minDate,
      required = props.required,
      hideError = props.hideError,
      style = props.style;
  var hasError = (0, _utils.getPreferredProp)(props, 'invalid') && (0, _utils.getPreferredProp)(props, 'touched');

  var containerClass = function containerClass() {
    return (0, _classnames["default"])({
      'ui-input-field': true,
      'ui-form-field': true,
      'ui-datetime-field': true,
      'ui-form-field--inline': inline,
      'ui-form-field--has-error': hasError,
      'ui-form-field--disabled': disabled,
      'ui-input-field--has-error': hasError,
      'ui-select-field--has-error': hasError
    }, className);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      props: props
    };
  });
  (0, _react.useEffect)(function () {
    if (dateField.current.state.value !== null && dateField.current.state.value.isValid() && hours !== '' && amPm !== '') {
      setDateFieldValue(dateField.current.state.value);
      var convertedHours = amPm === 'pm' ? (parseInt(hours, 10) + 12).toString() : hours; // If it is noon or midnight we need to set it to 0 or 12 hours.

      convertedHours = convertedHours === '24' || convertedHours === '12' ? (parseInt(convertedHours, 10) - 12).toString() : convertedHours;
      var updatedDateTime = new Date(Date.UTC(year, month, day, convertedHours, minutes)) / 1000;
      (0, _utils.getPreferredProp)(props, 'onChange')(updatedDateTime.toString());
    } else {
      (0, _utils.getPreferredProp)(props, 'onChange')('');
    }
  }, [year, month, day, hours, minutes, amPm]);
  var updateCalendarValue = (0, _react.useCallback)(function (calendarValue) {
    var currentDate = new Date(calendarValue * 1000);
    setYear(currentDate.getUTCFullYear().toString());
    setMonth(currentDate.getUTCMonth().toString());
    setDay(currentDate.getUTCDate().toString());
  }, [setYear, setMonth, setDay]);
  var updateHours = (0, _react.useCallback)(function (hourValue) {
    setHour(hourValue);
  }, [setHour]);
  var updateMinutes = (0, _react.useCallback)(function (minuteValue) {
    setMinute(minuteValue);
  }, [setMinute]);
  var updateAmPm = (0, _react.useCallback)(function (amPmValue) {
    setAmPm(amPmValue);
  }, [setAmPm]);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: containerClass()
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-datetime-field__controls"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-datetime-field__date-field"
  }, /*#__PURE__*/_react["default"].createElement(_index2["default"], {
    id: id,
    inline: false,
    label: label,
    onChange: updateCalendarValue,
    maxDate: maxDate,
    minDate: minDate,
    required: required,
    ref: dateField,
    value: dateFieldValue
  })), /*#__PURE__*/_react["default"].createElement("div", {
    className: "time-selectors"
  }, /*#__PURE__*/_react["default"].createElement(_index["default"], {
    clearable: clearable,
    className: "time-picker-field",
    label: "Hours",
    options: hoursSelectionOptions,
    shouldSort: false,
    onChange: updateHours,
    required: required,
    value: hours
  }), /*#__PURE__*/_react["default"].createElement("div", {
    className: "time-colon"
  }, ":"), /*#__PURE__*/_react["default"].createElement(_index["default"], {
    clearable: clearable,
    className: "time-picker-drop-downs",
    label: "Minutes",
    options: minutesSelectionOptions,
    shouldSort: false,
    onChange: updateMinutes,
    required: required,
    value: minutes
  }), /*#__PURE__*/_react["default"].createElement(_index["default"], {
    clearable: clearable,
    className: "time-picker-drop-downs",
    label: "AM/PM",
    options: AmOrPm,
    shouldSort: false,
    onChange: updateAmPm,
    required: required,
    value: amPm
  }))), !hideError && /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-form-field__error col-xs-12 date-time-error",
    style: style.error
  }, (0, _utils.getPreferredProp)(props, 'error')));
});

DateTime.propTypes = {
  className: _propTypes["default"].string,
  clearable: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  hideError: _propTypes["default"].string,
  id: _propTypes["default"].string,
  inline: _propTypes["default"].bool,
  label: _propTypes["default"].string,

  /** Max permitted date */
  maxDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),

  /** Min permitted date */
  minDate: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].object]),
  required: _propTypes["default"].bool,
  style: _propTypes["default"].object
};
DateTime.defaultProps = {
  clearable: false,
  className: '',
  disabled: false,
  id: '',
  inline: false,
  label: 'Time Picker',
  maxDate: null,
  minDate: null,
  required: true,
  hideError: false,
  style: {
    error: {}
  }
};
var _default = DateTime;
exports["default"] = _default;