"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _sanitize = require("./sanitize");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function buildChoices(options, valueKey, labelKey, multi, placeholder) {
  var choices = _lodash["default"].reduce(options, function (acc, option) {
    var choice = _lodash["default"].assign({}, {
      label: (0, _sanitize.stripHTML)(_lodash["default"].get(option, labelKey, '')),
      value: (0, _sanitize.stripHTML)(_lodash["default"].get(option, valueKey, '')),
      disabled: _lodash["default"].get(option, 'disabled')
    });

    if (_lodash["default"].has(option, 'children') && !_lodash["default"].isEmpty(option.children)) {
      var children = buildChoices(option.children, valueKey, labelKey);

      _lodash["default"].set(choice, 'choices', children);
    }

    return [].concat(_toConsumableArray(acc), [choice]);
  }, []);

  if (!multi && placeholder) {
    return [{
      label: placeholder,
      value: '',
      placeholder: true
    }].concat(_toConsumableArray(choices));
  }

  return choices;
}

var _default = buildChoices;
exports["default"] = _default;