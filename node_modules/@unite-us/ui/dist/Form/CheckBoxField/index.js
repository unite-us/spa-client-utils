"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../utils");

var _FormInputContainer = _interopRequireDefault(require("../../internal/FormInputContainer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Toggle Component
 *
 */
var CheckBoxField = /*#__PURE__*/function (_PureComponent) {
  _inherits(CheckBoxField, _PureComponent);

  var _super = _createSuper(CheckBoxField);

  function CheckBoxField(props) {
    var _this;

    _classCallCheck(this, CheckBoxField);

    _this = _super.call(this, props);
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CheckBoxField, [{
    key: "onChange",
    value: function onChange(e) {
      var value = e.target.checked;
      var callback = (0, _utils.getPreferredProp)(this.props, 'onChange');

      if (_lodash["default"].isFunction(callback)) {
        callback(e);
      }

      if (_lodash["default"].isFunction(this.props.onChange) && this.props.onChange !== callback) {
        this.props.onChange(value);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          style = _this$props.style,
          inline = _this$props.inline,
          disabled = _this$props.disabled,
          hideLabel = _this$props.hideLabel,
          hint = _this$props.hint,
          id = _this$props.id,
          label = _this$props.label,
          labelPosition = _this$props.labelPosition,
          showError = _this$props.showError,
          showHint = _this$props.showHint;
      var hasError = (0, _utils.getPreferredProp)(this.props, 'invalid') && (0, _utils.getPreferredProp)(this.props, 'touched');

      var containerClass = function containerClass() {
        return (0, _classnames["default"])({
          'ui-checkbox-field': true,
          'ui-form-field': true,
          'ui-form-field--inline': inline,
          'ui-form-field--disabled': disabled,
          'ui-checkbox-field--has-error': hasError,
          'ui-form-field--has-error': hasError
        }, className);
      };

      var labelClass = function labelClass() {
        return (0, _classnames["default"])({
          'ui-form-field__label': true,
          'ui-form-field__label--left': labelPosition === 'left',
          'sr-only': hideLabel
        });
      };

      return /*#__PURE__*/_react["default"].createElement(_FormInputContainer["default"], {
        className: containerClass(),
        styles: style,
        hint: hint,
        error: (0, _utils.getPreferredProp)(this.props, 'error'),
        showError: showError,
        showHint: showHint
      }, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("input", {
        id: id,
        type: "checkbox",
        checked: (0, _utils.getPreferredProp)(this.props, 'value') || (0, _utils.getPreferredProp)(this.props, 'checked'),
        onChange: this.onChange,
        onBlur: (0, _utils.getPreferredProp)(this.props, 'onBlur'),
        onFocus: (0, _utils.getPreferredProp)(this.props, 'onFocus'),
        name: (0, _utils.getPreferredProp)(this.props, 'name'),
        disabled: disabled
      }), /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: id,
        className: labelClass()
      }, label)));
    }
  }]);

  return CheckBoxField;
}(_react.PureComponent);
/**
 * disable no-unused-prop-types handled by utility functions
*/


CheckBoxField.propTypes = _objectSpread({
  /** id for reference */
  id: _propTypes["default"].string.isRequired,

  /** is the Toggle checked or not */
  checked: _propTypes["default"].bool,
  // eslint-disable-line react/no-unused-prop-types

  /** className for reference */
  className: _propTypes["default"].string,

  /** Override the inline-styles of the elements || **Not Recommended** */
  style: _propTypes["default"].shape({
    container: _propTypes["default"].object,
    label: _propTypes["default"].object,
    input: _propTypes["default"].object,
    hint: _propTypes["default"].object
  }),

  /** Should the label be hidden? */
  hideLabel: _propTypes["default"].bool,

  /** label text for button */
  label: _propTypes["default"].string.isRequired,

  /** Position of the label */
  labelPosition: _propTypes["default"].oneOf(['right', 'left']),

  /** Is the input disabled? */
  disabled: _propTypes["default"].bool,

  /** Help text displayed below the input */
  hint: _propTypes["default"].node,

  /** Show Error HTML defaults to true */
  showError: _propTypes["default"].bool,

  /** Show Hint HTML defaults to true */
  showHint: _propTypes["default"].bool
}, _utils.fieldProps);
CheckBoxField.defaultProps = {
  checked: false,
  className: '',
  disabled: false,
  hideLabel: false,
  hint: '',
  labelPosition: 'right',
  showError: true,
  showHint: true,
  style: {
    container: {},
    label: {},
    input: {},
    hint: {},
    error: {}
  }
};
var _default = CheckBoxField;
exports["default"] = _default;