"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Toggle Component
 *
 */
var ToggleField = function ToggleField(props) {
  var className = props.className,
      style = props.style,
      inline = props.inline,
      disabled = props.disabled,
      hint = props.hint,
      id = props.id,
      label = props.label,
      labelPosition = props.labelPosition;

  var containerClass = function containerClass() {
    return (0, _classnames["default"])({
      'ui-toggle-field': true,
      'ui-form-field': true,
      'ui-form-field--inline': inline,
      'ui-form-field--disabled': disabled
    }, className);
  };

  var labelClass = function labelClass() {
    return (0, _classnames["default"])({
      'ui-form-field__label': true,
      'ui-form-field__label--left': labelPosition === 'left'
    });
  };

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: containerClass(),
    style: style.container
  }, /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement("input", {
    id: id,
    type: "checkbox",
    checked: (0, _utils.getPreferredProp)(props, 'value') || (0, _utils.getPreferredProp)(props, 'checked'),
    onChange: (0, _utils.getPreferredProp)(props, 'onChange'),
    onBlur: (0, _utils.getPreferredProp)(props, 'onBlur'),
    onFocus: (0, _utils.getPreferredProp)(props, 'onFocus'),
    name: (0, _utils.getPreferredProp)(props, 'name'),
    disabled: disabled
  }), /*#__PURE__*/_react["default"].createElement("label", {
    htmlFor: id,
    className: labelClass()
  }, label)), /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-form-field__hint",
    style: style.hint
  }, hint));
};
/**
 * disable no-unused-prop-types handled by utility functions
*/


ToggleField.propTypes = _objectSpread({
  /** id for reference */
  id: _propTypes["default"].string.isRequired,

  /** is the Toggle checked or not */
  checked: _propTypes["default"].bool,
  // eslint-disable-line react/no-unused-prop-types

  /** className for reference */
  className: _propTypes["default"].string,

  /** Override the inline-styles of the elements || **Not Recommended** */
  style: _propTypes["default"].shape({
    container: _propTypes["default"].object,
    label: _propTypes["default"].object,
    input: _propTypes["default"].object,
    hint: _propTypes["default"].object
  }),

  /** label text for button */
  label: _propTypes["default"].string.isRequired,

  /** Position of the label */
  labelPosition: _propTypes["default"].oneOf(['right', 'left']),

  /** Is the input disabled? */
  disabled: _propTypes["default"].bool,

  /** Help text displayed below the input */
  hint: _propTypes["default"].node
}, _utils.fieldProps);
ToggleField.defaultProps = {
  checked: false,
  className: '',
  disabled: false,
  hint: '',
  labelPosition: 'right',
  style: {
    container: {},
    label: {},
    input: {},
    hint: {}
  }
};
var _default = ToggleField;
exports["default"] = _default;