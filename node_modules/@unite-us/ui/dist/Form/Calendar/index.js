"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDaySelected = exports.isDayOutOfMonth = exports.isDayInRange = exports.isDayInArray = exports.isDayDisabled = exports.getDays = exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _moment = _interopRequireDefault(require("moment"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var getDays = function getDays(year, month) {
  var firstDay = (0, _moment["default"])({
    year: year,
    month: month
  }).startOf('month').startOf('week');
  var lastDay = (0, _moment["default"])({
    year: year,
    month: month
  }).endOf('month').endOf('week');
  var days = [];
  var day = firstDay;

  do {
    days = _lodash["default"].concat(days, _lodash["default"].cloneDeep(day));
    day = day.add(1, 'day');
  } while (day.isBefore(lastDay));

  return _lodash["default"].chunk(days, 7);
};

exports.getDays = getDays;

var isDayInArray = function isDayInArray(day, daysArray) {
  var isUtc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return _lodash["default"].some(daysArray, function (selected) {
    if (isUtc) {
      return day.utc().isSame((0, _moment["default"])(selected), 'day');
    }

    return day.isSame((0, _moment["default"])(selected), 'day');
  });
};

exports.isDayInArray = isDayInArray;

var isDaySelected = function isDaySelected(day, selectedDays, dateRange, isUtc) {
  if (dateRange.start || dateRange.end) {
    return isDayInArray(day, [dateRange.start, dateRange.end], isUtc);
  }

  return isDayInArray(day, selectedDays, isUtc);
};

exports.isDaySelected = isDaySelected;

var isDayDisabled = function isDayDisabled(day, disabledDays, shouldDisableDay) {
  return isDayInArray(day, disabledDays) || shouldDisableDay(day);
};

exports.isDayDisabled = isDayDisabled;

var isDayInRange = function isDayInRange(day, dateRange) {
  if (dateRange.start && dateRange.end) {
    return day.isBetween((0, _moment["default"])(dateRange.start), (0, _moment["default"])(dateRange.end), 'day');
  }

  return false;
};

exports.isDayInRange = isDayInRange;

var isDayOutOfMonth = function isDayOutOfMonth(day, month) {
  return day.month() !== month;
};

exports.isDayOutOfMonth = isDayOutOfMonth;

var Calendar = function Calendar(props) {
  var weekDays = props.weekDays,
      year = props.year,
      month = props.month,
      selectedDays = props.selectedDays,
      onDayClick = props.onDayClick,
      disabledDays = props.disabledDays,
      className = props.className,
      id = props.id,
      style = props.style,
      shouldDisableDay = props.shouldDisableDay,
      dateRange = props.dateRange,
      isUtc = props.isUtc;
  var days = getDays(year, month);

  var calendarClass = function calendarClass() {
    return (0, _classnames["default"])({
      'ui-calendar': true
    }, className);
  };

  var dayClass = function dayClass(day) {
    return (0, _classnames["default"])({
      'ui-calendar__day': true,
      'ui-calendar__day--selected': isDaySelected(day, selectedDays, dateRange, isUtc),
      'ui-calendar__day--disabled': isDayDisabled(day, disabledDays, shouldDisableDay),
      'ui-calendar__day--out-of-month': isDayOutOfMonth(day, month),
      'ui-calendar__day--in-range': isDayInRange(day, dateRange) && !isDayOutOfMonth(day, month)
    });
  };

  var _onKeyPress = function onKeyPress(e, day) {
    e.preventDefault();

    if (e.charCode === 13 || e.charCode === 32) {
      onDayClick(day);
    }
  };

  return /*#__PURE__*/_react["default"].createElement("div", {
    className: calendarClass(),
    id: id,
    style: style.container
  }, /*#__PURE__*/_react["default"].createElement("table", null, /*#__PURE__*/_react["default"].createElement("thead", null, /*#__PURE__*/_react["default"].createElement("tr", null, weekDays.map(function (day) {
    return /*#__PURE__*/_react["default"].createElement("th", {
      key: "week-day-".concat(day)
    }, day);
  }))), /*#__PURE__*/_react["default"].createElement("tbody", null, days.map(function (week) {
    return /*#__PURE__*/_react["default"].createElement("tr", {
      key: "week-".concat(week[0].week())
    }, week.map(function (day) {
      return /*#__PURE__*/_react["default"].createElement("td", {
        key: "day-".concat(day.dayOfYear()),
        className: dayClass(day)
      }, /*#__PURE__*/_react["default"].createElement("div", {
        role: "button",
        onClick: function onClick() {
          return isDayDisabled(day, disabledDays, shouldDisableDay) ? _lodash["default"].noop() : onDayClick(day);
        },
        tabIndex: isDayDisabled(day, disabledDays, shouldDisableDay) ? -1 : 0,
        onKeyPress: function onKeyPress(e) {
          return _onKeyPress(e, day);
        }
      }, day.date()));
    }));
  }))));
};

Calendar.propTypes = {
  /** id for reference */
  id: _propTypes["default"].string,

  /** className for reference */
  className: _propTypes["default"].string,

  /** Override the inline-styles of the elements || **Not Recommended** */
  style: _propTypes["default"].shape({
    container: _propTypes["default"].object
  }),

  /** Current month to display */
  month: _propTypes["default"].number.isRequired,

  /** Current year to display */
  year: _propTypes["default"].number.isRequired,

  /** List of week days label */
  weekDays: _propTypes["default"].array,

  /** Day click callback. Passes the moment Object */
  onDayClick: _propTypes["default"].func,

  /** List of selected days. Can be a moment object or anything moment can parse */
  selectedDays: _propTypes["default"].array,

  /** List of disabled days. Can be a moment object or anything moment can parse */
  disabledDays: _propTypes["default"].array,

  /** Function returning a boolean */
  shouldDisableDay: _propTypes["default"].func,

  /** Start and end date. This overrides the selectedDays prop */
  dateRange: _propTypes["default"].shape({
    start: _propTypes["default"].any,
    end: _propTypes["default"].any
  }),

  /** are the dates in UTC format? */
  isUtc: _propTypes["default"].bool
};
Calendar.defaultProps = {
  id: '',
  className: '',
  style: {
    container: {}
  },
  weekDays: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  onDayClick: _lodash["default"].noop,
  selectedDays: [],
  disabledDays: [],
  shouldDisableDay: _lodash["default"].noop,
  dateRange: {
    start: null,
    end: null
  },
  isUtc: true
};
var _default = Calendar;
exports["default"] = _default;