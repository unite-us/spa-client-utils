"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _constants = require("./utils/constants");

var _v2constants = require("./utils/v2constants");

var _Browser = require("../../utils/Browser");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Icon Component
 */
var Icon = function Icon(props) {
  var icons = props.icons,
      id = props.id,
      className = props.className,
      style = props.style,
      ariaLabel = props.ariaLabel,
      canReceiveFocus = props.canReceiveFocus;

  var iconClass = function iconClass() {
    return (0, _classnames["default"])({
      'ui-icon': true
    }, className);
  };

  var styles = _lodash["default"].isEmpty(style) ? {
    svg: {
      display: 'inline-block',
      verticalAlign: 'middle',
      fill: props.color
    }
  } : style;

  var allIcons = _objectSpread(_objectSpread({}, _constants.ICONS), _v2constants.V2ICONS);

  var viewBox = _lodash["default"].get(icons, 'icon.viewBox', null) || _lodash["default"].get(allIcons, props.icon, {}).viewBox;

  var iconImage = _lodash["default"].get(icons, 'icon.markup', null) || _lodash["default"].get(allIcons, props.icon, {}).markup;

  if (_lodash["default"].isEmpty(viewBox) || _lodash["default"].isEmpty(iconImage)) {
    return /*#__PURE__*/_react["default"].createElement("p", null, "Icon viewBox or markup does not exist!");
  }

  if (props.onClick && !props.disabled) {
    return /*#__PURE__*/_react["default"].createElement("a", {
      role: "button",
      "aria-label": ariaLabel,
      onClick: props.onClick,
      tabIndex: canReceiveFocus ? 0 : -1,
      onKeyDown: (0, _Browser.navigateOnEnterOrSpace)(props.onClick)
    }, /*#__PURE__*/_react["default"].createElement("svg", {
      id: id,
      className: iconClass(),
      style: styles.svg,
      width: "".concat(props.size, "px"),
      height: "".concat(props.size, "px"),
      viewBox: viewBox
    }, iconImage));
  }

  return /*#__PURE__*/_react["default"].createElement("svg", {
    id: id,
    className: iconClass(),
    style: styles.svg,
    width: "".concat(props.size, "px"),
    height: "".concat(props.size, "px"),
    viewBox: viewBox
  }, iconImage);
};

Icon.propTypes = {
  /** ariaLabel for a11y */
  ariaLabel: _propTypes["default"].string,

  /** id for reference */
  id: _propTypes["default"].string,

  /** className for reference */
  className: _propTypes["default"].string,

  /** Icon name */
  icon: _propTypes["default"].string.isRequired,

  /** Color of icon */
  color: _propTypes["default"].string,

  /** Size of Icon */
  size: _propTypes["default"].number,

  /** clickable functionality. */
  onClick: _propTypes["default"].func,

  /**
   * An object of icons if coming directly from the application.
   */
  icons: _propTypes["default"].object,

  /** Override the inline-styles of the root element || Not Recommended */
  style: _propTypes["default"].object,

  /** Is the Icon disabled? */
  disabled: _propTypes["default"].bool,

  /** If the parent already has a tabIndex, this prop will allow you to change the tabIndex for Icon */
  canReceiveFocus: _propTypes["default"].bool
};
Icon.defaultProps = {
  ariaLabel: null,
  id: '',
  className: '',
  icon: '',
  color: '',
  size: 16,
  onClick: null,
  icons: {},
  style: {},
  disabled: false,
  canReceiveFocus: true
};
var _default = Icon;
exports["default"] = _default;