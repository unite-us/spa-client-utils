"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash"));

var ReactStrap = _interopRequireWildcard(require("reactstrap"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Popover = /*#__PURE__*/function (_Component) {
  _inherits(Popover, _Component);

  var _super = _createSuper(Popover);

  function Popover(props) {
    var _this;

    _classCallCheck(this, Popover);

    _this = _super.call(this, props);
    _this.state = {
      done: false
    };
    return _this;
  }

  _createClass(Popover, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          hideArrow = _this$props.hideArrow,
          className = _this$props.className,
          isOpen = _this$props.isOpen,
          target = _this$props.target,
          placement = _this$props.placement,
          toggle = _this$props.toggle,
          header = _this$props.header,
          body = _this$props.body,
          boundariesElement = _this$props.boundariesElement;

      var popoverClass = function popoverClass() {
        return (0, _classnames["default"])({
          'ui-popover': true,
          'ui-popover--no-arrow': hideArrow
        }, className);
      };

      return /*#__PURE__*/_react["default"].createElement(ReactStrap.Popover, {
        id: id,
        className: popoverClass(),
        toggle: toggle,
        isOpen: isOpen,
        target: target,
        placement: placement,
        hideArrow: hideArrow,
        trigger: "legacy",
        fade: false,
        boundariesElement: boundariesElement
      }, !_lodash["default"].isEmpty(header) ? /*#__PURE__*/_react["default"].createElement(ReactStrap.PopoverHeader, null, header) : null, !_lodash["default"].isEmpty(body) ? /*#__PURE__*/_react["default"].createElement(ReactStrap.PopoverBody, null, body) : null);
    }
  }]);

  return Popover;
}(_react.Component);

Popover.propTypes = {
  /** id for reference */
  id: _propTypes["default"].string,

  /** className for reference */
  className: _propTypes["default"].string,

  /** prop to determine open and close state of popover */
  isOpen: _propTypes["default"].bool,

  /** id of target anchor */
  target: _propTypes["default"].node.isRequired,

  /** toggle function necessary for switching between open and close state */
  toggle: _propTypes["default"].func,

  /** placement of popover */
  placement: _propTypes["default"].oneOf(['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'right', 'right-start', 'right-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end']),

  /** Header data */
  header: _propTypes["default"].string,

  /** hide or show arrow */
  hideArrow: _propTypes["default"].bool,

  /** Body data */
  body: _propTypes["default"].node,

  /** Boundaries for popper, can be scrollParent, window, viewport, or any DOM element */
  boundariesElement: _propTypes["default"].string
};
Popover.defaultProps = {
  id: '',
  className: '',
  isOpen: false,
  target: '',
  placement: 'auto',
  toggle: _lodash["default"].noop,
  header: '',
  body: [],
  hideArrow: false,
  boundariesElement: ''
};
var _default = Popover;
exports["default"] = _default;