"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Button Component
 *
 */
var Button = /*#__PURE__*/function (_Component) {
  _inherits(Button, _Component);

  var _super = _createSuper(Button);

  function Button(props) {
    var _this;

    _classCallCheck(this, Button);

    _this = _super.call(this, props);
    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Button, [{
    key: "onClick",
    value: function onClick(e) {
      var disabled = this.props.disabled;

      if (!disabled) {
        this.props.onClick(e);
        this.buttonDOM.blur();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          disabled = _this$props.disabled,
          fullWidth = _this$props.fullWidth,
          link = _this$props.link,
          iconLeft = _this$props.iconLeft,
          iconRight = _this$props.iconRight,
          id = _this$props.id,
          label = _this$props.label,
          secondary = _this$props.secondary,
          shouldRender = _this$props.shouldRender,
          style = _this$props.style,
          type = _this$props.type,
          primary = _this$props.primary,
          dataTestElement = _this$props['data-test-element'],
          upperCase = _this$props.upperCase;

      if (!shouldRender) {
        return null;
      }

      var buttonClass = function buttonClass() {
        return (0, _classnames["default"])({
          'ui-button': true,
          'ui-button--icon': iconLeft || iconRight,
          'ui-button--primary': primary,
          'ui-button--secondary': secondary,
          'ui-button--disabled': disabled,
          'ui-button--full-width': fullWidth,
          'ui-button--link': link,
          'ui-button--upper-case': upperCase
        }, className);
      };

      return /*#__PURE__*/_react["default"].createElement("button", {
        id: id,
        className: buttonClass(),
        "aria-label": label,
        onClick: this.onClick,
        disabled: disabled,
        style: style,
        ref: function ref(buttonDOM) {
          _this2.buttonDOM = buttonDOM;
        },
        type: type,
        "data-test-element": dataTestElement
      }, iconLeft ? /*#__PURE__*/_react["default"].createElement("span", {
        className: "ui-button__icon-left"
      }, iconLeft) : null, label, iconRight ? /*#__PURE__*/_react["default"].createElement("span", {
        className: "ui-button__icon-right"
      }, iconRight) : null);
    }
  }]);

  return Button;
}(_react.Component);

Button.propTypes = {
  /** id for reference */
  id: _propTypes["default"].string,

  /** className for reference */
  className: _propTypes["default"].string,

  /** label text for button */
  label: _propTypes["default"].string,

  /**
   * Gets called when the user clicks(tap) on the button
   *
   * @param {SyntheticEvent} event The react `SyntheticEvent`
   */
  onClick: _propTypes["default"].func,

  /** value to determine button styles and configs Primary */
  primary: _propTypes["default"].bool,

  /** value to determine button styles and configs */
  secondary: _propTypes["default"].bool,

  /**
   * If true, the button will be disabled.
   *
   */
  disabled: _propTypes["default"].bool,

  /**
   * If true, the button will be full width.
   *
   */
  fullWidth: _propTypes["default"].bool,

  /**
   * If true, the button will be a link.
   *
   */
  link: _propTypes["default"].bool,

  /** Conditional logic to determine if render || default value: true */
  shouldRender: _propTypes["default"].bool,

  /** Override the inline-styles of the root element || Not Recommended */
  style: _propTypes["default"].object,

  /** Apply types on the button component i.e. "submit", "reset", "button", etc */
  type: _propTypes["default"].string,

  /** Icon node element displayed on the left of the label */
  iconLeft: _propTypes["default"].node,

  /** Icon node element displayed on the right of the label */
  iconRight: _propTypes["default"].node,

  /** text style for button if wanting to uppercase */
  upperCase: _propTypes["default"].bool,

  /** standardized attr for selectors */
  'data-test-element': _propTypes["default"].string
};
Button.defaultProps = {
  id: '',
  className: '',
  label: '',
  link: false,
  onClick: _lodash.noop,
  primary: false,
  secondary: false,
  disabled: false,
  fullWidth: false,
  shouldRender: true,
  style: {},
  type: 'button',
  iconLeft: null,
  iconRight: null,
  'data-test-element': null,
  upperCase: false
};
var _default = Button;
exports["default"] = _default;