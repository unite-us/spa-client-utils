"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash"));

var _filterChildren = _interopRequireDefault(require("../../utils/Children/filterChildren"));

var _keyCodes = require("../../utils/Browser/keyCodes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Menu = /*#__PURE__*/function (_Component) {
  _inherits(Menu, _Component);

  var _super = _createSuper(Menu);

  function Menu(props) {
    var _this;

    _classCallCheck(this, Menu);

    _this = _super.call(this, props);
    _this.state = {
      position: 0,
      isOpen: false,
      menuItemLength: 0
    };
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.setPosition = _this.setPosition.bind(_assertThisInitialized(_this));
    _this.togglePopover = _this.togglePopover.bind(_assertThisInitialized(_this));
    _this.onDocumentKeyDown = _this.onDocumentKeyDown.bind(_assertThisInitialized(_this));
    _this.onDocumentFocus = _this.onDocumentFocus.bind(_assertThisInitialized(_this));
    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized(_this));
    _this.setPositionOnKeyDown = _this.setPositionOnKeyDown.bind(_assertThisInitialized(_this));
    _this.setMenuItemLength = _this.setMenuItemLength.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Menu, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('keydown', this.onDocumentKeyDown, false);
      document.addEventListener('click', this.handleClick, false);
      window.addEventListener('focus', this.onDocumentFocus, true);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('keydown', this.onDocumentKeyDown);
      document.removeEventListener('click', this.handleClick);
      window.removeEventListener('focus', this.onDocumentFocus);
    }
  }, {
    key: "onDocumentFocus",
    value: function onDocumentFocus(event) {
      var isWindowEvent = event.target.console;
      var clickedOutsideOfMenuDom = event.target && !isWindowEvent && this.menuDom && !this.menuDom.contains(event.target);

      if (this.state.isOpen && clickedOutsideOfMenuDom) {
        this.setState({
          isOpen: false,
          position: 0
        });
      }
    }
  }, {
    key: "onDocumentKeyDown",
    value: function onDocumentKeyDown(event) {
      if (event.keyCode === _keyCodes.ESC_KEY_CODE && this.state.isOpen) {
        event.preventDefault();
        this.setState({
          isOpen: false,
          position: 0
        });
      }
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(event) {
      this.props.keyHandler(event);

      if ((event.keyCode === _keyCodes.RETURN_KEY_CODE || event.keyCode === _keyCodes.SPACEBAR_KEY_CODE) && !this.state.isOpen) {
        return this.togglePopover();
      }

      return this.setPositionOnKeyDown(event);
    }
  }, {
    key: "setPositionOnKeyDown",
    value: function setPositionOnKeyDown(event) {
      var menuItemLength = this.state.menuItemLength || (0, _filterChildren["default"])(this.props.children).length;
      var isLastMenuItem = this.state.position === menuItemLength - 1;

      if (event.keyCode === _keyCodes.TAB_KEY_CODE && this.state.isOpen && menuItemLength > 0 && !isLastMenuItem) {
        event.preventDefault();
        this.setState({
          position: this.state.position + 1
        });
        return true;
      }

      if (event.keyCode === _keyCodes.DOWN_ARROW_KEY_CODE && this.state.isOpen) {
        event.preventDefault();
        this.setState({
          position: (this.state.position + 1) % menuItemLength
        });
        return true;
      }

      if (event.keyCode === _keyCodes.UP_ARROW_KEY_CODE && this.state.isOpen) {
        event.preventDefault();
        this.setState(this.state.position === 0 ? {
          position: menuItemLength - 1
        } : {
          position: this.state.position - 1
        });
        return true;
      }

      return false;
    }
  }, {
    key: "setPosition",
    value: function setPosition(position) {
      this.setState({
        position: position
      });
    }
  }, {
    key: "setMenuItemLength",
    value: function setMenuItemLength(count) {
      this.setState({
        menuItemLength: count
      });
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      if (this.state.isOpen && this.menuDom && !this.menuDom.contains(event.target)) {
        this.setState({
          isOpen: false,
          position: 0
        });
      }
    }
  }, {
    key: "togglePopover",
    value: function togglePopover() {
      this.setState({
        isOpen: !this.state.isOpen,
        position: 0
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          anchorElement = _this$props.anchorElement,
          className = _this$props.className,
          closeMainMenu = _this$props.closeMainMenu,
          id = _this$props.id,
          position = _this$props.position,
          style = _this$props.style,
          subItemParent = _this$props.subItemParent,
          target = _this$props.target,
          onClick = _this$props.onClick;
      var isOpen = this.state.isOpen;

      var menuClass = function menuClass() {
        return (0, _classnames["default"])({
          'ui-menu': true
        }, className);
      };

      var menuListClass = function menuListClass() {
        return (0, _classnames["default"])({
          'ui-menu__list': true,
          'ui-menu__list--hidden': !isOpen,
          'ui-menu__list--notification': position === 'notification',
          'ui-menu__list--bottom-start': position === 'bottom-start',
          'ui-menu__list--bottom-end': position === 'bottom-end',
          'ui-menu__list--top-start': position === 'top-start',
          'ui-menu__list--top-end': position === 'top-end',
          'ui-menu__list--right-start': position === 'right-start',
          'ui-menu__list--right-end': position === 'right-end',
          'ui-menu__list--left-start': position === 'left-start',
          'ui-menu__list--left-end': position === 'left-end',
          'ui-menu__list--target-top-bottom': target === 'top-bottom',
          'ui-menu__list--target-top-bottom-hidden': !isOpen && target === 'top-bottom',
          'ui-menu__list--target-bottom-top': target === 'bottom-top',
          'ui-menu__list--target-bottom-top-hidden': !isOpen && target === 'bottom-top',
          'ui-menu__list--target-right-left': target === 'right-left',
          'ui-menu__list--target-right-left-hidden': !isOpen && target === 'right-left',
          'ui-menu__list--target-left-right': target === 'left-right',
          'ui-menu__list--target-left-right-hidden': !isOpen && target === 'left-right'
        });
      };

      var filteredChildren = (0, _filterChildren["default"])(this.props.children);

      var childrenWithFuncs = _react["default"].Children.map(filteredChildren, function (child, index) {
        return /*#__PURE__*/_react["default"].cloneElement(child, {
          closeMainMenu: closeMainMenu,
          handleMenuItemNavigation: _this2.onKeyDown,
          index: index,
          position: _this2.state.position,
          setMenuItemLength: _this2.setMenuItemLength,
          setPosition: _this2.setPosition,
          togglePopover: _this2.togglePopover,
          subItemParent: subItemParent,
          handleParentMenuonClick: onClick
        });
      });

      return /*#__PURE__*/_react["default"].createElement("div", {
        id: id,
        className: menuClass(),
        style: style,
        ref: function ref(menuDom) {
          _this2.menuDom = menuDom;
        }
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-menu__anchor",
        role: "menu",
        onClick: this.togglePopover,
        onKeyDown: this.onKeyDown,
        tabIndex: 0
      }, anchorElement), /*#__PURE__*/_react["default"].createElement("div", {
        className: menuListClass()
      }, childrenWithFuncs));
    }
  }]);

  return Menu;
}(_react.Component);

Menu.propTypes = {
  /** id for reference */
  id: _propTypes["default"].string,

  /** className for reference */
  className: _propTypes["default"].string,

  /** anchor element the menuItem will reference to */
  anchorElement: _propTypes["default"].node.isRequired,

  /** position of the menulist, will default to bottom */
  position: _propTypes["default"].oneOf(['right-start', 'right-end', 'left-start', 'left-end', 'bottom-start', 'bottom-end', 'top-start', 'top-end']),

  /** target of how you want the menu to appear */
  target: _propTypes["default"].oneOf(['top-bottom', 'bottom-top', 'right-left', 'left-right']),

  /** If true, menu has a parent menu */
  subItemParent: _propTypes["default"].bool,

  /** If function exists from MenuItem component, will close both submenu and parent menu */
  closeMainMenu: _propTypes["default"].func,

  /** If function exists from MenuItem component, will navigate directly to menu item if only one exists */
  keyHandler: _propTypes["default"].func,

  /** Override the inline-styles of the root element || Not Recommended */
  style: _propTypes["default"].object,

  /**
   * children props for content inside
   * @ignore
   */
  children: _propTypes["default"].array.isRequired,
  onClick: _propTypes["default"].func
};
Menu.defaultProps = {
  id: '',
  className: '',
  position: 'bottom-start',
  target: 'top-bottom',
  style: {},
  subItemParent: false,
  closeMainMenu: _lodash["default"].noop,
  onKeyDown: _lodash["default"].noop,
  keyHandler: _lodash["default"].noop,
  handleClick: _lodash["default"].noop,
  onClick: _lodash["default"].noop
};
var _default = Menu;
exports["default"] = _default;