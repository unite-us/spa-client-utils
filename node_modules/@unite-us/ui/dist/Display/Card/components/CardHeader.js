"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = _interopRequireDefault(require("lodash"));

var _Icon = _interopRequireDefault(require("../../Icon"));

var _filterChildren = _interopRequireDefault(require("../../../utils/Children/filterChildren"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var CardHeader = function CardHeader(props) {
  var className = props.className,
      showHeaderIcon = props.showHeaderIcon,
      _props$headerIconDeta = props.headerIconDetails,
      color = _props$headerIconDeta.color,
      icon = _props$headerIconDeta.icon,
      size = _props$headerIconDeta.size,
      toolTipText = _props$headerIconDeta.toolTipText,
      id = props.id,
      style = props.style,
      title = props.title,
      subtitle = props.subtitle,
      showExpandableButton = props.showExpandableButton,
      expanded = props.expanded,
      titleStyle = props.titleStyle,
      subtitleStyle = props.subtitleStyle;

  var tableHeaderClass = function tableHeaderClass() {
    return (0, _classnames["default"])({
      'ui-card-header': true
    }, className);
  };

  var newChildren = (0, _filterChildren["default"])(props.children); // Tooltip position calculations

  var headerTitleRef = (0, _react.useRef)(null);
  var mainContentRef = (0, _react.useRef)(null);
  var toolTipPosition;

  if (toolTipText && headerTitleRef.current && mainContentRef.current) {
    var widthDifference = mainContentRef.current.offsetWidth - (headerTitleRef.current.offsetWidth + 225);
    /** toolTipPosition(em) = target(px) / font-size(px) */

    toolTipPosition = (widthDifference < 0 ? widthDifference : -25) / 14;
  }

  return /*#__PURE__*/_react["default"].createElement("div", {
    id: id,
    className: tableHeaderClass(),
    style: style
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-card-header__main-content",
    ref: mainContentRef
  }, /*#__PURE__*/_react["default"].createElement("h2", {
    className: "ui-card-header__title",
    style: titleStyle,
    ref: headerTitleRef
  }, title, showHeaderIcon ? /*#__PURE__*/_react["default"].createElement("span", {
    className: "icon-tooltip"
  }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    color: color,
    icon: icon,
    size: size
  }), toolTipText ? /*#__PURE__*/_react["default"].createElement("p", {
    className: "tooltip",
    style: {
      left: "".concat(toolTipPosition, "em")
    }
  }, toolTipText) : null) : null), showExpandableButton ? /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-card-header__expandable"
  }, expanded ? /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    icon: "IconChevronDown",
    onClick: props.onExpandChange
  }) : /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
    icon: "IconChevronRight",
    onClick: props.onExpandChange
  })) : null), !_lodash["default"].isEmpty(subtitle) ? /*#__PURE__*/_react["default"].createElement("div", {
    className: "ui-card-header__sub-content mt-half",
    style: subtitleStyle
  }, subtitle) : null, newChildren);
};

CardHeader.propTypes = {
  /** Boolean toggle to show an icon indicator for the program title */
  showHeaderIcon: _propTypes["default"].bool,

  /** Icon tooltip for the card header */
  headerIconDetails: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].string]),

  /** id for reference */
  id: _propTypes["default"].string,

  /** className for reference */
  className: _propTypes["default"].string,

  /** Override the inline-styles of the root element || Not Recommended */
  style: _propTypes["default"].object,

  /** Can be used to render a title in Card Header. */
  title: _propTypes["default"].node,

  /** Can be used to render a subtitle in Card Header. */
  subtitle: _propTypes["default"].string,

  /** Override the inline-styles of the title element || Not Recommended */
  titleStyle: _propTypes["default"].object,

  /** Override the inline-styles of the subtitle element || Not Recommended */
  subtitleStyle: _propTypes["default"].object,

  /**  If true, this card component will include a button to expand the card. */
  showExpandableButton: _propTypes["default"].bool,

  /**
   * Callback function fired when the expandable state of the card has changed.
   * @ignore
   */
  onExpandChange: _propTypes["default"].func,

  /**
   * If true, this card component is expanded (uncontrolled)
   * @ignore
   */
  expanded: _propTypes["default"].bool,
  children: _propTypes["default"].node
};
CardHeader.defaultProps = {
  headerIconDetails: {},
  showHeaderIcon: false,
  id: '',
  className: '',
  style: {},
  titleStyle: {},
  subtitleStyle: {},
  title: '',
  subtitle: '',
  showExpandableButton: false,
  expanded: null,
  onExpandChange: null,
  children: []
};
var _default = CardHeader;
exports["default"] = _default;