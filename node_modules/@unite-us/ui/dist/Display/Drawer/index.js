"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _filterChildren = _interopRequireDefault(require("../../utils/Children/filterChildren"));

var _Icon = _interopRequireDefault(require("../Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function getHeight(topOffset) {
  return {
    height: "calc(100% - ".concat(topOffset, ")")
  };
}

var Drawer = /*#__PURE__*/function (_Component) {
  _inherits(Drawer, _Component);

  var _super = _createSuper(Drawer);

  function Drawer(props) {
    var _this;

    _classCallCheck(this, Drawer);

    _this = _super.call(this, props);
    _this.onEscClick = _this.onEscClick.bind(_assertThisInitialized(_this));
    _this.onClose = _this.onClose.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Drawer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('keydown', this.onEscClick, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('keydown', this.onEscClick);
    }
  }, {
    key: "onEscClick",
    value: function onEscClick(event) {
      if (event.keyCode === 27 && this.props.open) {
        var closeFn = this.props.onEscClick || this.props.onClose;
        closeFn();
      }
    }
  }, {
    key: "onClose",
    value: function onClose() {
      if (this.props.open) {
        this.props.onClose();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          id = _this$props.id,
          className = _this$props.className,
          children = _this$props.children,
          open = _this$props.open,
          secondary = _this$props.secondary,
          hideCloseButton = _this$props.hideCloseButton,
          style = _this$props.style,
          title = _this$props.title,
          topOffset = _this$props.topOffset,
          width = _this$props.width,
          theme = _this$props.theme;

      var drawerClass = function drawerClass() {
        return (0, _classnames["default"])({
          'ui-drawer': true,
          'ui-drawer--primary': !secondary,
          'ui-drawer--secondary': secondary,
          'ui-drawer--opened': open
        }, className);
      };

      var buttonClass = function buttonClass() {
        return (0, _classnames["default"])({
          'ui-drawer__close-btn': true,
          'ui-drawer__close-btn--opened': open,
          'ui-drawer__close-btn--dark': theme === 'dark'
        }, className);
      };

      var newChildren = (0, _filterChildren["default"])(children);
      return /*#__PURE__*/_react["default"].createElement("div", {
        id: id,
        className: drawerClass(),
        style: _objectSpread(_objectSpread({}, style), {}, {
          top: topOffset,
          width: width
        }, getHeight(topOffset))
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-drawer__container"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-drawer__body"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-drawer__title"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-drawer__title__close-button"
      }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
        ariaLabel: "Back",
        icon: "IconChevronLeft",
        size: 16,
        color: "#506784",
        onClick: this.onClose
      })), title && /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-drawer__title__content"
      }, title)), newChildren), !hideCloseButton && /*#__PURE__*/_react["default"].createElement("div", {
        className: buttonClass()
      }, /*#__PURE__*/_react["default"].createElement(_Icon["default"], {
        ariaLabel: "Close",
        icon: "IconCross",
        size: 14,
        color: theme === 'dark' ? '#FFFFFF' : '#B7D2E5',
        onClick: this.onClose
      }))));
    }
  }]);

  return Drawer;
}(_react.Component);

Drawer.propTypes = {
  /** id for reference */
  id: _propTypes["default"].string,

  /** className for reference */
  className: _propTypes["default"].string,

  /** If true, drawer hides close button.  Defaults to false. */
  hideCloseButton: _propTypes["default"].bool,

  /** When close button is clicked or Esc key pressed, run this function */
  onClose: _propTypes["default"].func,

  /** When Esc key is pressed, run this function. Takes precedence over onClose function. */
  onEscClick: _propTypes["default"].func,

  /** If true, the Drawer is open. */
  open: _propTypes["default"].bool.isRequired,

  /** If true, the Drawer is positioned to open from the opposite side. */
  secondary: _propTypes["default"].bool,

  /** Override the inline-styles of the root element || Not Recommended */
  style: _propTypes["default"].object,

  /** The drawer title string or node */
  title: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),

  /** How much to offset drawer from top of window */
  topOffset: _propTypes["default"].string,

  /** The width of the Drawer in pixels or percentage in string format ex. 50% to fill half of the window or 100% and so on. */
  width: _propTypes["default"].string,

  /**
   * children props for content inside
   * @ignore
   */
  children: _propTypes["default"].node,

  /** theme to determine light or dark mode */
  theme: _propTypes["default"].oneOf(['light', 'dark'])
};
Drawer.defaultProps = {
  children: [],
  className: '',
  id: '',
  onClose: _lodash["default"].noop,
  // Important that onEscClick is 'undefined' by default.  When it is not defined,
  // onClose function takes precedence.
  onEscClick: undefined,
  secondary: false,
  style: {},
  hideCloseButton: false,
  title: null,
  topOffset: '0',
  width: '20%',
  theme: 'light'
};
var _default = Drawer;
exports["default"] = _default;