"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SECONDARY_TAG = 'span';

var Expandable = /*#__PURE__*/function (_Component) {
  _inherits(Expandable, _Component);

  var _super = _createSuper(Expandable);

  function Expandable(props) {
    var _this;

    _classCallCheck(this, Expandable);

    _this = _super.call(this, props);
    _this.onKeyPress = _this.onKeyPress.bind(_assertThisInitialized(_this));
    _this.toggleExpansion = _this.toggleExpansion.bind(_assertThisInitialized(_this));
    _this.state = {
      expanded: !props.initiallyCollapsed
    };
    return _this;
  }

  _createClass(Expandable, [{
    key: "onKeyPress",
    value: function onKeyPress(e) {
      // Capture Enter and Space keys
      if (['Enter', ' '].includes(e.key)) {
        e.preventDefault();
        this.toggleExpansion(e);
      }
    }
  }, {
    key: "toggleExpansion",
    value: function toggleExpansion(e) {
      var _this2 = this;

      e.stopPropagation();
      this.setState(function () {
        return {
          expanded: !_this2.state.expanded
        };
      });

      if (this.props.onExpandChange) {
        this.props.onExpandChange();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var expanded = (0, _lodash.isNull)(this.props.expanded) ? this.state.expanded : this.props.expanded;
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          header = _this$props.header,
          headerTag = _this$props.headerTag,
          id = _this$props.id,
          secondary = _this$props.secondary;
      var HeaderTag = secondary ? SECONDARY_TAG : headerTag;
      return /*#__PURE__*/_react["default"].createElement("section", _extends({
        className: Expandable.mainClass(className)
      }, id ? {
        id: id
      } : {}), /*#__PURE__*/_react["default"].createElement("div", {
        className: Expandable.containerClass(expanded)
      }, /*#__PURE__*/_react["default"].createElement("a", {
        onClick: this.toggleExpansion,
        onKeyPress: this.onKeyPress,
        role: "button",
        tabIndex: 0
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: Expandable.headerClass(secondary)
      }, /*#__PURE__*/_react["default"].createElement(HeaderTag, {
        className: "ui-expandable__header-content"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "ui-expandable-text"
      }, header), /*#__PURE__*/_react["default"].createElement("div", {
        className: Expandable.caretClass(expanded)
      })))), /*#__PURE__*/_react["default"].createElement("div", {
        className: Expandable.bodyClass(expanded, secondary)
      }, children)));
    }
  }], [{
    key: "mainClass",
    value: function mainClass(className) {
      return (0, _classnames["default"])('ui-expandable', className);
    }
  }, {
    key: "containerClass",
    value: function containerClass(expanded) {
      return (0, _classnames["default"])('ui-expandable__container', {
        'ui-expandable__container--collapsed': !expanded,
        'ui-expandable__container--expanded': expanded
      });
    }
  }, {
    key: "headerClass",
    value: function headerClass(secondary) {
      return (0, _classnames["default"])('ui-expandable__header', {
        'ui-expandable__header--primary': !secondary,
        'ui-expandable__header--secondary': secondary
      });
    }
  }, {
    key: "bodyClass",
    value: function bodyClass(expanded, secondary) {
      return (0, _classnames["default"])('ui-expandable__body', {
        'ui-expandable__body--collapsed': !expanded,
        'ui-expandable__body--expanded': expanded,
        'ui-expandable__body--secondary': secondary
      });
    }
  }, {
    key: "caretClass",
    value: function caretClass(expanded) {
      return (0, _classnames["default"])({
        'pull-right': true,
        'ui-expandable-caret open': expanded,
        'ui-expandable-caret closed': !expanded
      });
    }
  }]);

  return Expandable;
}(_react.Component);

Expandable.propTypes = {
  /** children for content inside */
  children: _propTypes["default"].node,

  /** optional className for reference */
  className: _propTypes["default"].string,

  /** Whether this card is expanded. */
  expanded: _propTypes["default"].bool,

  /** string or node header used as the toggle for the main component */
  header: _propTypes["default"].node.isRequired,

  /** tag string used for semantic headings, it will not affect the styles */
  headerTag: _propTypes["default"].oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),

  /** optional id for reference */
  id: _propTypes["default"].string,

  /** boolean to determine if container is rendered expanded */
  initiallyCollapsed: _propTypes["default"].bool.isRequired,

  /** function that is called when toggleExpansion is called */
  onExpandChange: _propTypes["default"].func,

  /** determines style and color of expandable container */
  secondary: _propTypes["default"].bool
};
Expandable.defaultProps = {
  children: [],
  className: '',
  expanded: null,
  headerTag: 'h5',
  id: '',
  initiallyCollapsed: false,
  onExpandChange: null,
  secondary: false
};
var _default = Expandable;
exports["default"] = _default;