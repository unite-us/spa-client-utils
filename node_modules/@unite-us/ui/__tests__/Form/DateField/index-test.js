import React from 'react';
import { shallow, mount } from 'enzyme';
import moment from 'moment';
import DateField from 'components/Form/DateField';

describe('DateField', () => {
  it('renders', () => {
    const props = {
      id: 'date-1',
      label: 'Date field 1',
    };
    const field = shallow(<DateField {...props} />);
    expect(field.find('.ui-date-field')).toHaveLength(1);
    expect(field.find('input#date-1')).toHaveLength(1);
    field.unmount();
  });

  it('renders with value', () => {
    const props = {
      id: 'date-1',
      label: 'Date field 1',
      value: '1500000000',
    };
    const field = mount(<DateField {...props} />);
    expect(field.state('year')).toBe(2017);
    expect(field.state('month')).toBe(6);

    field.setProps({ value: '1490000000' });
    expect(field.state('year')).toBe(2017);
    expect(field.state('month')).toBe(2);
  });

  it('handles change', () => {
    const onChange = jest.fn();

    const props = {
      id: 'date-1',
      label: 'Date field 1',
      value: '1500000000',
      onChange,
    };
    const field = mount(<DateField {...props} />);
    field.instance().onDaySelect(moment('2017-11-01'));
    expect(onChange).toHaveBeenCalledWith('1509494400');
  });

  it('handles month change', () => {
    const props = {
      id: 'date-1',
      label: 'Date field 1',
      value: '11-03-2017',
      valueFormat: 'MM-DD-YYYYYY',
    };
    const field = mount(<DateField {...props} />);
    expect(field.state('month')).toBe(10);

    field.instance().onPreviousMonth();
    expect(field.state('month')).toBe(9);

    field.instance().onNextMonth();
    expect(field.state('month')).toBe(10);
  });

  describe('onBlur', () => {
    it('clears the input if the input value length is less than 3', () => {
      const props = {
        id: 'date-1',
        label: 'Date field 1',
      };

      const onChange = jest.fn();
      const field = mount(<DateField {...props} />);
      field.instance().onChange = onChange;
      field.setState({ inputValue: 11 });
      expect(field.find('input#date-1').props().value).toBe(11);

      field.find('input#date-1').simulate('blur');
      expect(field.find('input#date-1').props().value).toBe('');
      expect(onChange).toHaveBeenCalledWith('');
    });

    it('calls triggerOnBlur when value is invalid ', () => {
      const props = {
        id: 'date-1',
        label: 'Date field 1',
        onBlur: jest.fn(),
      };

      const onChange = jest.fn();
      const field = mount(<DateField {...props} />);
      field.instance().onChange = onChange;

      field.setState({ inputValue: 11 });
      expect(field.find('input#date-1').props().value).toBe(11);

      field.find('input#date-1').simulate('blur');
      expect(props.onBlur).toHaveBeenCalled();
    });

    it('calls triggerOnBlur when value is valid', () => {
      const props = {
        id: 'date-1',
        label: 'Date field 1',
        onBlur: jest.fn(),
      };

      const onChange = jest.fn();
      const field = mount(<DateField {...props} />);
      field.instance().onChange = onChange;

      field.setState({ inputValue: 1111 });
      expect(field.find('input#date-1').props().value).toBe(1111);

      field.find('input#date-1').simulate('blur');
      expect(props.onBlur).toHaveBeenCalled();
    });
  });
});
