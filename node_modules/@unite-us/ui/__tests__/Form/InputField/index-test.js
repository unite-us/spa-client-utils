import React from 'react';
import InputField from 'components/Form/InputField';
import { shallow } from 'enzyme';

describe('InputField', () => {
  it('renders', () => {
    const props = {
      id: 'test-1',
      label: 'Test 1',
    };
    const result = shallow(<InputField {...props} />);
    expect(result.find('input#test-1')).toHaveLength(1);
  });

  it('renders redux-form 5 field', () => {
    const onChange = jest.fn();
    const onBlur = jest.fn();
    const props = {
      id: 'test-2',
      label: 'Test 2',
      field: {
        name: 'input-field',
        value: 'hello',
        onChange,
        onBlur,
      },
    };
    const result = shallow(<InputField {...props} />);
    const input = result.find('input');
    input.simulate('change', 'Changed');
    expect(result.find('input#test-2')).toHaveLength(1);
    expect(onChange).toHaveBeenCalledWith('Changed');
  });

  it('renders redux-form 5 field and custom onChange', () => {
    const onChange = jest.fn();
    const customOnChange = jest.fn();
    const onBlur = jest.fn();
    const props = {
      id: 'test-2',
      label: 'Test 2',
      field: {
        name: 'input-field',
        value: 'hello',
        onChange,
        onBlur,
      },
      onChange: customOnChange,
    };
    const result = shallow(<InputField {...props} />);
    const input = result.find('input');
    input.simulate('change', 'Changed');
    expect(result.find('input#test-2')).toHaveLength(1);
    expect(onChange).toHaveBeenCalledWith('Changed');
    expect(customOnChange).toHaveBeenCalledWith('Changed');
  });

  it('renders redux-form 7 field', () => {
    const onChange = jest.fn();
    const onBlur = jest.fn();
    const props = {
      id: 'test-3',
      label: 'Test 3',
      input: {
        name: 'input-field',
        value: 'hello',
        onChange,
        onBlur,
      },
      meta: {
        error: 'Required',
        invalid: true,
        valid: false,
        touched: true,
      },
    };
    const result = shallow(<InputField {...props} />);
    const error = result.find('.ui-form-field__error');
    expect(result.find('input#test-3')).toHaveLength(1);
    expect(error.text()).toBe('Required');
    expect(result.find('.ui-input-field--has-error')).toHaveLength(1);
  });

  it('autoComplete defaults to on', () => {
    const onChange = jest.fn();
    const onBlur = jest.fn();
    const props = {
      id: 'test-3',
      label: 'Test 3',
      input: {
        name: 'input-field',
        value: 'hello',
        onChange,
        onBlur,
      },
      meta: {
        error: 'Required',
        invalid: true,
        valid: false,
        touched: true,
      },
    };
    const result = shallow(<InputField {...props} />);

    expect(result.find('input').prop('autoComplete'))
      .toEqual('on');
  });

  it('autoComplete is `off` when prop is passed in as `off`', () => {
    const onChange = jest.fn();
    const onBlur = jest.fn();
    const props = {
      autoComplete: 'off',
      id: 'test-3',
      label: 'Test 3',
      input: {
        name: 'input-field',
        value: 'hello',
        onChange,
        onBlur,
      },
      meta: {
        error: 'Required',
        invalid: true,
        valid: false,
        touched: true,
      },
    };
    const result = shallow(<InputField {...props} />);

    expect(result.find('input').prop('autoComplete'))
      .toEqual('off');
  });

  it('autoComplete is `whatever` the prop is passed in as', () => {
    const onChange = jest.fn();
    const onBlur = jest.fn();
    const props = {
      autoComplete: 'something',
      id: 'test-3',
      label: 'Test 3',
      input: {
        name: 'input-field',
        value: 'hello',
        onChange,
        onBlur,
      },
      meta: {
        error: 'Required',
        invalid: true,
        valid: false,
        touched: true,
      },
    };
    const result = shallow(<InputField {...props} />);

    expect(result.find('input').prop('autoComplete'))
      .toEqual('something');
  });
});
