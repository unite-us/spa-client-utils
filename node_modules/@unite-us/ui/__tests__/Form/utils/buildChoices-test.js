import { buildChoices } from 'components/Form/utils';

describe('buildChoices', () => {
  it('returns an empty array when no options', () => {
    const result = buildChoices();
    expect(result).toEqual([]);
  });

  it('builds choices with second level options', () => {
    const options = [
      { id: 'item-1', name: 'One', other: 'bla' },
      {
        id: 'item-2',
        name: 'Two',
        children: [
          { id: 'item-21', name: '21' },
          { id: 'item-22', name: '22' },
        ],
      },
      { id: 'item-3', name: 'Three' },
      { id: 'item-4', name: 'Four' },
      { id: 'item-5', name: 'Five' },
    ];

    const expected = [
      { label: 'One', value: 'item-1' },
      {
        label: 'Two',
        value: 'item-2',
        choices: [
          { value: 'item-21', label: '21' },
          { value: 'item-22', label: '22' },
        ],
      },
      { value: 'item-3', label: 'Three' },
      { value: 'item-4', label: 'Four' },
      { value: 'item-5', label: 'Five' },
    ];

    const result = buildChoices(options, 'id', 'name', true, 'Multi placeholder');
    expect(result).toEqual(expected);
  });

  it('Add a placeholder for single select', () => {
    const options = [
      { id: 'item-1', name: 'One', other: 'bla' },
      { id: 'item-2', name: 'Two' },
      { id: 'item-3', name: 'Three' },
      { id: 'item-4', name: 'Four' },
      { id: 'item-5', name: 'Five' },
    ];

    const expected = [
      { label: 'Placeholder', value: '', placeholder: true },
      { label: 'One', value: 'item-1' },
      { value: 'item-2', label: 'Two' },
      { value: 'item-3', label: 'Three' },
      { value: 'item-4', label: 'Four' },
      { value: 'item-5', label: 'Five' },
    ];

    const result = buildChoices(options, 'id', 'name', false, 'Placeholder');
    expect(result).toEqual(expected);
  });
});
