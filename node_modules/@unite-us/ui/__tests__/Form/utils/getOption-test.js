import { getSelectValue } from 'components/Form/utils';

const options = [
  { id: 'item-1', name: 'One', other: 'bla' },
  {
    id: 'item-2',
    name: 'Two',
    children: [
      { id: 'item-21', name: '21' },
      { id: 'item-22', name: '22' },
    ],
  },
  { id: 'item-3', name: 'Three' },
  { id: 'item-4', name: 'Four' },
  { id: 'item-5', name: 'Five' },
];

describe('getSelectValue', () => {
  it('returns emty string when no value', () => {
    const result = getSelectValue(undefined, 'id', options);
    expect(result).toBe('');
  });

  it('return the option on first level', () => {
    const result = getSelectValue({ value: 'item-3' }, 'id', options);
    expect(result).toEqual({ id: 'item-3', name: 'Three' });
  });

  it('return the option on child level', () => {
    const result = getSelectValue({ value: 'item-22' }, 'id', options);
    expect(result).toEqual({ id: 'item-22', name: '22' });
  });

  it('returns an array of options if value is an array', () => {
    const value = [
      { value: 'item-3' },
      { value: 'item-5' },
    ];
    const expected = [
      { id: 'item-3', name: 'Three' },
      { id: 'item-5', name: 'Five' },
    ];

    const result = getSelectValue(value, 'id', options);
    expect(result).toEqual(expected);
  });

  it('retruns a string when valueKey is "value"', () => {
    const result = getSelectValue({ value: 'item-3' }, undefined, options);
    expect(result).toBe('item-3');
  });

  it('returns an array of strings if value is an array and valueKey is "value"', () => {
    const value = [
      { value: 'item-3' },
      { value: 'item-5' },
    ];
    const expected = ['item-3', 'item-5'];

    const result = getSelectValue(value, 'value', options);
    expect(result).toEqual(expected);
  });
});
