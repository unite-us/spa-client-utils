import { getSelectValue } from 'components/Form/utils';

const optionsWithStdKeys = [
  { value: 'item-1', label: 'Item 1' },
  { value: 'item-2', label: 'Item 2' },
  { value: 'item-3', label: 'Item 3' },
  { value: 'item-4', label: 'Item 4' },
];

const options = [
  { id: 'item-1', name: 'Item 1' },
  { id: 'item-2', name: 'Item 2' },
  { id: 'item-3', name: 'Item 3' },
  { id: 'item-4', name: 'Item 4' },
];

const nestedOptions = [
  { id: 'item-1', name: 'Item 1' },
  { id: 'item-2', name: 'Item 2', children: [{ id: 'item-21', name: 'Item 21' }, { id: 'item-22', name: 'Item 22' }] },
  { id: 'item-3', name: 'Item 3' },
  { id: 'item-4', name: 'Item 4' },
];

describe('getSelectValue', () => {
  it('returns an empty string if no value', () => {
    expect(getSelectValue()).toBe('');
  });

  it('returns the value string if the key is "value"', () => {
    const value = {
      value: 'item-2',
      label: 'Item 2',
      id: 2,
    };
    expect(getSelectValue(value, undefined, options)).toBe('item-2');
  });

  it('returns the value object if the key is "value" but forced to return object', () => {
    const value = {
      value: 'item-2',
      label: 'Item 2',
      id: 2,
    };
    const expected = { value: 'item-2', label: 'Item 2' };
    expect(getSelectValue(value, 'value', optionsWithStdKeys, true)).toEqual(expected);
  });

  it('returns the array of value string if the key is "value"', () => {
    const value = [
      {
        value: 'item-2',
        label: 'Item 2',
        id: 2,
      },
      {
        value: 'item-4',
        label: 'Item 4',
        id: 2,
      },
    ];
    expect(getSelectValue(value, undefined, options)).toEqual(['item-2', 'item-4']);
  });

  it('returns the corresponding option', () => {
    const value = {
      value: 'item-2',
      label: 'Item 2',
      id: 2,
    };
    expect(getSelectValue(value, 'id', options)).toEqual({ id: 'item-2', name: 'Item 2' });
  });

  it('returns the array of value options', () => {
    const value = [
      {
        value: 'item-2',
        label: 'Item 2',
        id: 2,
      },
      {
        value: 'item-4',
        label: 'Item 4',
        id: 2,
      },
    ];
    const expected = [
      { id: 'item-2', name: 'Item 2' },
      { id: 'item-4', name: 'Item 4' },
    ];
    expect(getSelectValue(value, 'id', options)).toEqual(expected);
  });

  it('returns the corresponding option with nestedOptions', () => {
    const value = {
      value: 'item-22',
      label: 'Item 22',
      id: 2,
    };
    expect(getSelectValue(value, 'id', nestedOptions)).toEqual({ id: 'item-22', name: 'Item 22' });
  });

  it('returns the corresponding string with nestedOptions and key is value', () => {
    const value = {
      value: 'item-22',
      label: 'Item 22',
      id: 2,
    };
    expect(getSelectValue(value, undefined, nestedOptions)).toBe('item-22');
  });

  it('returns the array of value options with nested options', () => {
    const value = [
      {
        value: 'item-21',
        label: 'Item 21',
        id: 2,
      },
      {
        value: 'item-4',
        label: 'Item 4',
        id: 3,
      },
    ];
    const expected = [
      { id: 'item-21', name: 'Item 21' },
      { id: 'item-4', name: 'Item 4' },
    ];
    expect(getSelectValue(value, 'id', nestedOptions)).toEqual(expected);
  });
});
