import React from 'react';
import SelectField from 'components/Form/SelectField';
import _ from 'lodash';
import { mount } from 'enzyme';

const options = [
  { id: 'item-1', name: 'One', other: 'bla' },
  { id: 'item-2', name: 'Two' },
  { id: 'item-3', name: 'Three' },
  { id: 'item-4', name: 'Four' },
  { id: 'item-5', name: 'Five' },
];

describe('SelectField', () => {
  it('renders', () => {
    const props = {
      id: 'test-1',
      label: 'Test 1',
      labelKey: 'name',
      loadingText: 'test loading text',
      options,
      searchPlaceholderValue: 'test searchPlaceholderValue',
      searchChoices: true,
      valueKey: 'id',
    };
    const result = mount(<SelectField {...props} />);
    expect(result.find('select#test-1')).toHaveLength(1);
  });

  describe('redux-form 5 field', () => {
    const onChange = jest.fn();
    const onBlur = jest.fn();

    const props = {
      id: 'test-2',
      label: 'Test 2',
      field: {
        name: 'select-field',
        value: 'hello',
        onChange,
        onBlur,
      },
      loadingText: 'test loading text',
      options,
      searchPlaceholderValue: 'test searchPlaceholderValue',
      searchChoices: true,
      shouldSearchOnChange: true,
      shouldSearchOnHide: true,
    };

    afterEach(() => {
      onChange.mockClear();
      onBlur.mockClear();
    });

    it('renders redux-form 5 field without a labelKey', () => {
      const result = mount(<SelectField {...props} />);
      expect(result.find('select#test-2')).toHaveLength(1);
    });

    it('renders redux-form 5 field with a labelKey', () => {
      const result = mount(<SelectField {...props} labelKey={'name'} />);
      expect(result.find('select#test-2')).toHaveLength(1);
    });
  });


  describe('redux-form 7 field', () => {
    const onChange = jest.fn();
    const onBlur = jest.fn();

    const props = {
      id: 'test-3',
      label: 'Test 3',
      select: {
        name: 'select-field',
        value: 'hello',
        onChange,
        onBlur,
      },
      meta: {
        error: 'Required',
        invalid: true,
        valid: false,
        touched: true,
      },
      loadingText: 'test loading text',
      options,
      searchPlaceholderValue: 'test searchPlaceholderValue',
      searchChoices: true,
    };

    afterEach(() => {
      onChange.mockClear();
      onBlur.mockClear();
    });

    it('renders redux-form 7 field without labelKey', () => {
      const result = mount(<SelectField {...props} />);
      const error = result.find('.ui-form-field__error');
      expect(result.find('select#test-3')).toHaveLength(1);
      expect(error.text()).toBe('Required');
      expect(result.find('.ui-select-field--has-error')).toHaveLength(1);
    });

    it('renders redux-form 7 field with labelKey', () => {
      const result = mount(<SelectField {...props} lableKey={'name'} />);
      const error = result.find('.ui-form-field__error');
      expect(result.find('select#test-3')).toHaveLength(1);
      expect(error.text()).toBe('Required');
      expect(result.find('.ui-select-field--has-error')).toHaveLength(1);
    });

    it('calls the async `loadOptions` on mount when `loadOnMount` is set', () => {
      const loadOptions = jest.fn();
      const newProps = {
        ...props,
        loadOptions,
        loadOnMount: true,
      };
      mount(<SelectField {...newProps} />);
      expect(loadOptions).toHaveBeenCalledWith('', expect.any(Function));
    });

    it('triggers an empty search onChange', () => {
      const comp = mount(<SelectField {...props} />);
      const searchSpy = jest.spyOn(comp.instance(), 'onSearch');
      comp.instance().onChange();
      expect(searchSpy).toHaveBeenCalled();
    });

    it('an empty search onChange is not triggered when shouldSearchOnChange is false', () => {
      const newProps = {
        ...props,
        shouldSearchOnChange: false,
      };
      const comp = mount(<SelectField {...newProps} />);
      const searchSpy = jest.spyOn(comp.instance(), 'onSearch');
      comp.instance().onChange();
      expect(searchSpy).not.toHaveBeenCalled();
    });

    it('triggers an empty search onHideDropdown', () => {
      const comp = mount(<SelectField {...props} />);
      const searchSpy = jest.spyOn(comp.instance(), 'onSearch');
      comp.instance().onHideDropdown();
      expect(searchSpy).toHaveBeenCalled();
    });

    it('an empty search is not triggered when shouldSearchOnHide is false', () => {
      const newProps = {
        ...props,
        shouldSearchOnHide: false,
      };
      const comp = mount(<SelectField {...newProps} />);
      const searchSpy = jest.spyOn(comp.instance(), 'onSearch');
      comp.instance().onHideDropdown();
      expect(searchSpy).not.toHaveBeenCalled();
    });
  });


  it('listens to props', () => {
    const props = {
      disabled: true,
      id: 'test-1',
      label: 'Test 1',
      labelKey: 'name',
      loadingText: 'test loading text',
      options,
      searchChoices: true,
      searchPlaceholderValue: 'test searchPlaceholderValue',
      value: options[0],
      valueKey: 'id',
    };
    const comp = mount(<SelectField {...props} />);
    expect(comp.find('.ui-form-field--disabled')).toHaveLength(1);

    comp.setProps({ disabled: false });
    expect(comp.find('.ui-form-field--disabled')).toHaveLength(0);

    const setOptionsSpy = jest.spyOn(comp.instance(), 'setOptions');
    const newOptions = _.take(options, 4);
    comp.setProps({ options: newOptions });
    expect(setOptionsSpy).toHaveBeenCalledWith({ options: newOptions, placeholder: '' });

    const setValueSpy = jest.spyOn(comp.instance(), 'setValue');
    const newValue = options[1];
    comp.setProps({ value: newValue });
    expect(setValueSpy).toHaveBeenCalledWith(newValue);
  });

  it('receives searchPlaceholderValue prop changes and calls updateSearchPlaceholderValue to update choices', () => {
    const props = {
      disabled: true,
      id: 'test-1',
      label: 'Test 1',
      labelKey: 'name',
      loadingText: 'test loading text',
      options,
      searchChoices: true,
      searchPlaceholderValue: 'test searchPlaceholderValue',
      value: options[0],
      valueKey: 'id',
    };

    const comp = mount(<SelectField {...props} />);
    const updateSearchPlaceholderValueSpy = jest.spyOn(comp.instance(), 'updateSearchPlaceholderValue');
    const newSearchPlaceholderValue = 'new search value placeholder';
    comp.setProps({ searchPlaceholderValue: newSearchPlaceholderValue });
    expect(updateSearchPlaceholderValueSpy).toHaveBeenCalledWith(newSearchPlaceholderValue);
  });

  it('calls focus callbacks on showDropdown events', () => {
    const fieldOnFocus = jest.fn();
    const manualOnFocus = jest.fn();

    const props = {
      disabled: true,
      field: {
        onFocus: fieldOnFocus,
      },
      id: 'test-1',
      label: 'Test 1',
      labelKey: 'name',
      loadingText: 'test loading text',
      onFocus: manualOnFocus,
      options,
      searchChoices: true,
      searchPlaceholderValue: 'test searchPlaceholderValue',
      value: options[0],
      valueKey: 'id',
    };

    const wrapper = mount(<SelectField {...props} />);
    const event = { foo: 'bar' };
    wrapper.instance().onShowDropdown(event);
    expect(fieldOnFocus).toHaveBeenCalledWith(event);
    expect(manualOnFocus).toHaveBeenCalledWith(event);
  });

  it('renders toggle button if multiple is true to toggle dropdown as visible or not.', () => {
    const props = {
      id: 'test-2',
      label: 'Test 2',
      multiple: true,
    };
    const result = mount(<SelectField {...props} />);
    expect(result.find('button.multiple-selector')).toHaveLength(1);
  });

  it('renders the post label content', () => {
    const content = (<span className="my-span">Content here</span>);
    const props = {
      id: 'test-1',
      label: 'Test 1',
      labelKey: 'name',
      loadingText: 'test loading text',
      options,
      searchPlaceholderValue: 'test searchPlaceholderValue',
      searchChoices: true,
      valueKey: 'id',
      postLabelContent: content,
    };
    const result = mount(<SelectField {...props} />);
    expect(result.find('.my-span')).toHaveLength(1);
  });

  describe('#handleToggle click event handler', () => {
    const props = {
      id: 'test-2',
      label: 'Test 2',
      multiple: true,
    };

    const result = mount(<SelectField {...props} />);

    const clickEvent = {
      nativeEvent: {
        stopImmediatePropagation: jest.fn(),
      },
    };

    it('calls native event stopImmedidatePropagation on the click event', () => {
      result.find('button.multiple-selector').simulate('click', clickEvent);

      expect(clickEvent.nativeEvent.stopImmediatePropagation).toHaveBeenCalled();
    });

    it('calls debounceSetIsOpen and sets the proper state for isOpen handleToggle', () => {
      const spy = jest.spyOn(result.instance(), 'debounceSetIsOpen');
      const showDropdownSpy = jest.spyOn(result.instance().choices, 'showDropdown');

      result.find('button.multiple-selector').simulate('click', clickEvent);
      result.instance().handleToggle(clickEvent);
      result.setState({ isOpen: true });

      expect(spy).toHaveBeenCalled();
      expect(result.state('isOpen')).toBeTruthy();
      expect(showDropdownSpy).toHaveBeenCalled();
      spy.mockClear();
    });
  });
});
