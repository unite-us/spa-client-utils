import React from 'react';
import { mount } from 'enzyme';
import _ from 'lodash';
import moment from 'moment';
import DurationField from 'components/Form/DurationField';

const startField = {
  value: null,
  valid: true,
  invalid: false,
  touched: false,
  pristine: true,
  dirty: false,
  visited: false,
  error: '',
  onChange: _.noop,
};
const endField = {
  value: null,
  valid: true,
  invalid: false,
  touched: false,
  pristine: true,
  dirty: false,
  visited: false,
  error: '',
  onChange: _.noop,
};

describe('DurationField', () => {
  it('renders', () => {
    const props = {
      id: 'date-1',
      label: 'Date field 1',
      startField,
      endField,
    };
    const field = mount(<DurationField {...props} />);
    expect(field.find('.ui-duration-field')).toHaveLength(1);
    expect(field.find('button#date-1')).toHaveLength(1);
    field.unmount();
  });

  it('handles change', () => {
    const onChange = jest.fn();

    const props = {
      id: 'date-1',
      label: 'Date field 1',
      startField: _.merge(startField, { onChange }),
      endField,
    };
    const field = mount(<DurationField {...props} />);
    field.instance().onDaySelect(moment('2017-11-01'));
    expect(onChange).toHaveBeenCalledWith('1509494400');
    field.instance().onDaySelect(moment('2017-11-08'));
    expect(field.state('endValue').format('YYYY-MM-DD')).toBe('2017-11-08');

    const newStart = _.assign({}, field.prop('startField'), { value: '1510099200' });
    field.setProps({ startField: newStart });
    expect(moment(field.state('startValue')).format('YYYY-MM-DD')).toBe('2017-11-08');

    const newEnd = _.assign({}, field.prop('endField'), { value: '1510272000' });
    field.setProps({ endField: newEnd });
    expect(moment(field.state('endValue')).format('YYYY-MM-DD')).toBe('2017-11-10');
  });

  it('handles month change', () => {
    const props = {
      id: 'date-1',
      label: 'Date field 1',
      startField: { ...startField, ...{ value: '11-05-2017' } },
      endField,
      valueFormat: 'MM-DD-YYYYYY',
    };
    const field = mount(<DurationField {...props} />);
    expect(field.state('month')).toBe(10);

    field.instance().onPreviousMonth();
    expect(field.state('month')).toBe(9);

    field.instance().onNextMonth();
    expect(field.state('month')).toBe(10);
  });

  describe('onBlur', () => {
    const props = {
      id: 'date-1',
      label: 'Date field 1',
      startField: { ...startField, value: '11-05-2017' },
      endField,
    };

    it('clears the input if the input value length is less than 3', () => {
      const field = mount(<DurationField {...props} />);
      expect(field.find('#date-1-start').props().value).toBe('11/05/2017');

      field.setState({ startInputValue: 11 });
      expect(field.find('#date-1-start').props().value).toBe(11);

      field.find('#date-1-start').simulate('blur');
      expect(field.find('#date-1-start').props().value).toBe('11/05/2017');
    });

    it('sets the date correctly if the input value length is greater than 2', () => {
      const currentYear = moment().year();
      const field = mount(<DurationField {...props} />);
      expect(field.find('#date-1-start').props().value).toBe('11/05/2017');

      field.setState({ startInputValue: '11/1' });
      expect(field.find('#date-1-start').props().value).toBe('11/1');

      field.find('#date-1-start').simulate('blur');
      expect(field.find('#date-1-start').props().value).toBe(`11/01/${currentYear}`);
    });
  });
});
