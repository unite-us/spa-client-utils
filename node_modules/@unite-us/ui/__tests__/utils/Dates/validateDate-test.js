import moment from 'moment';
import { validateDate } from '../../../src/components/utils/Dates';

describe('validateDate', () => {
  it('returns undefined if no date', () => {
    expect(validateDate(null)).toBeUndefined();
  });

  it('returns "" for a valid date', () => {
    expect(validateDate(moment())).toBe('');
  });

  it('returns an error for date >= maxDate', () => {
    const error = validateDate(moment(), '10-31-2017', null, null, 'YYYY-MM-DD');
    expect(error).toBe('Date should not be after 2017-10-31');
  });

  it('returns a custom errpr for date >= maxDate', () => {
    const customErrorMessage = 'Start date must be before end date';
    const error = validateDate(moment(), '10-31-2017', null, null, 'YYYY-MM-DD', customErrorMessage);
    expect(error).toBe('Start date must be before end date');
  });

  it('validates if the date is the same as maxDate', () => {
    const error = validateDate(moment(), moment(), null, null, 'YYYY-MM-DD');
    expect(error).toBe('');
  });

  it('returns an error for date <= minDate', () => {
    const minDate = moment().add(2, 'day');
    const error = validateDate(moment(), null, minDate, null, 'YYYY-MM-DD');
    expect(error).toBe(`Date should be after ${minDate.format('YYYY-MM-DD')}`);
  });

  it('returns a custom error for date <= minDate', () => {
    const minDate = moment().add(2, 'day');
    const customErrorMessage = 'End date must be after start date';
    const error = validateDate(moment(), null, minDate, null, 'YYYY-MM-DD', customErrorMessage);
    expect(error).toBe('End date must be after start date');
  });

  it('returns an error for a disabled date', () => {
    const check = day => day.isSame(moment(), 'day');
    const error = validateDate(moment(), null, null, check, 'YYYY-MM-DD');
    expect(error).toBe('Invalid Date');
  });

  it('returns an error for an invalid date', () => {
    const error = validateDate(moment('blabla'), null, null, null, 'YYYY-MM-DD');
    expect(error).toBe('Invalid Date');
  });

  it('returns an error for an invalid date', () => {
    const error = validateDate(moment('0000-12-12'), null, null, null, 'YYYY-MM-DD');
    expect(error).toBe('Invalid Date');
  });
});
