import React from 'react';
import { mount, shallow } from 'enzyme';
import Button from 'components/Display/Button';
import buttonHelper from './buttonHelper';

describe('Button Component', () => {
  describe('Default Button', () => {
    let button;
    let props;

    beforeAll(() => {
      props = buttonHelper.defaultButtonProps;
      button = shallow(<Button {...props} />);
    });

    it('renders the button component', () => {
      expect(button.find('.ui-button')).toHaveLength(1);
    });
  });

  describe('Secondary Button', () => {
    let button;
    let props;

    beforeAll(() => {
      props = buttonHelper.secondaryButtonProps;
      button = shallow(<Button {...props} />);
    });

    it('renders the secondary button styled component', () => {
      expect(button.find('.ui-button--secondary')).toHaveLength(1);
    });
  });

  describe('Full Width', () => {
    let button;
    let props;

    beforeAll(() => {
      props = buttonHelper.fullWidthProps;
      button = shallow(<Button {...props} />);
    });

    it('renders the secondary button styled component', () => {
      expect(button.find('.ui-button--full-width')).toHaveLength(1);
    });
  });

  describe('Link', () => {
    let button;
    let props;

    beforeAll(() => {
      props = buttonHelper.linkProps;
      button = shallow(<Button {...props} />);
    });

    it('renders the link button styled component', () => {
      expect(button.find('.ui-button--link')).toHaveLength(1);
    });
  });

  describe('Icon Button', () => {
    it('renders the Icon Button component left', () => {
      const props = buttonHelper.iconButtonPropsLeft;
      const button = shallow(<Button {...props} />);
      expect(button.find('.ui-button__icon-left')).toHaveLength(1);
    });

    it('renders the Icon Button component right', () => {
      const props = buttonHelper.iconButtonPropsRight;
      const button = shallow(<Button {...props} />);
      expect(button.find('.ui-button__icon-right')).toHaveLength(1);
    });
  });

  describe('No Render', () => {
    it('should not render anything based on the shouldRender prop', () => {
      const props = buttonHelper.noRenderButtonProps;
      const button = shallow(<Button {...props} />);
      expect(button.find('.ui-button')).toHaveLength(0);
    });
  });

  describe('Disabled Button', () => {
    it('should not call onClick prop if disabled', () => {
      const defaultProps = buttonHelper.defaultButtonProps;
      const onClickSpy = jest.fn();
      const props = {
        ...defaultProps,
        onClick: onClickSpy,
        disabled: true,
        blur: jest.fn(),
      };

      const button = mount(<Button {...props} />);
      button.simulate('click');
      expect(onClickSpy).not.toHaveBeenCalled();
    });
  });

  describe('Enabled Button', () => {
    it('should call onClick prop if disabled is false', () => {
      const defaultProps = buttonHelper.defaultButtonProps;
      const onClickSpy = jest.fn();
      const props = {
        ...defaultProps,
        onClick: onClickSpy,
        disabled: false,
        blur: jest.fn(),
      };

      const button = mount(<Button {...props} />);
      button.simulate('click');
      expect(onClickSpy).toHaveBeenCalled();
    });
  });
});
