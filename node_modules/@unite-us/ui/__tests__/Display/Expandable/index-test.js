import React from 'react';
import { mount } from 'enzyme';
import Expandable from 'components/Display/Expandable';

describe('Expandable', () => {
  const props = {
    header: 'Word',
  };

  it('renders', () => {
    const wrapper = mount(<Expandable {...props}><p>up</p></Expandable>);
    expect(wrapper.find('.ui-expandable__header')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__body')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__container')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__header--primary')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__header--secondary')).toHaveLength(0);
    expect(wrapper.find('.ui-expandable__body--secondary')).toHaveLength(0);
    expect(wrapper.find('.ui-expandable__container--collapsed')).toHaveLength(0);
    expect(wrapper.find('.ui-expandable__container--expanded')).toHaveLength(1);
  });

  it('renders secondary Expandable style when secondary prop is true', () => {
    const wrapper = mount(<Expandable {...props} secondary ><p>up</p></Expandable>);

    expect(wrapper.find('.ui-expandable__header')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__body')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__container')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__header--primary')).toHaveLength(0);
    expect(wrapper.find('.ui-expandable__header--secondary')).toHaveLength(1);
    expect(wrapper.find('.ui-expandable__body--secondary')).toHaveLength(1);
  });

  it('sets expanded to false when header is clicked and it is expanded', () => {
    const wrapper = mount(<Expandable {...props} id="1"><p>up</p></Expandable>);

    expect(wrapper.state('expanded')).toBeTruthy();
    wrapper.find('a').simulate('click', { stopPropagation: jest.fn() });

    expect(wrapper.state('expanded')).toBeFalsy();
  });

  it('sets expanded to true when header is clicked and it is not expanded', () => {
    const wrapper = mount(<Expandable {...props} initiallyCollapsed><p>up</p></Expandable>);

    expect(wrapper.state('expanded')).toBeFalsy();
    wrapper.find('a').simulate('click', { stopPropagation: jest.fn() });

    expect(wrapper.state('expanded')).toBeTruthy();
  });

  it('sets state when onKeyPress is triggered with a spacebar', () => {
    const wrapper = mount(<Expandable {...props}><p>up</p></Expandable>);

    const event = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      keyCode: 32,
      key: ' ',
    };

    expect(wrapper.state('expanded')).toBeTruthy();
    wrapper.instance().onKeyPress(event);

    expect(wrapper.state('expanded')).toBeFalsy();
  });

  it('sets state when onKeyPress is triggered with a return', () => {
    const wrapper = mount(<Expandable {...props} initiallyCollapsed><p>up</p></Expandable>);

    const event = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      keyCode: 13,
      key: 'Enter',
    };

    expect(wrapper.state('expanded')).toBeFalsy();
    wrapper.instance().onKeyPress(event);

    expect(wrapper.state('expanded')).toBeTruthy();
  });

  it('does not set state when onKeyPress is triggered with something other than spacebar ore return', () => {
    const wrapper = mount(<Expandable {...props}><p>up</p></Expandable>);

    const event = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      keyCode: 14,
      key: 'n',
    };

    expect(wrapper.state('expanded')).toBeTruthy();
    wrapper.instance().onKeyPress(event);

    expect(wrapper.state('expanded')).toBeTruthy();
  });

  it('calls onExpandChange when toggled', () => {
    const event = {
      stopPropagation: jest.fn(),
      preventDefault: jest.fn(),
      keyCode: 13,
      key: 'Enter',
    };

    const expandedProps = {
      ...props,
      expanded: true,
      onExpandChange: jest.fn(),
    };

    const wrapper = mount(<Expandable {...expandedProps}><p>up</p></Expandable>, {
      lifecycleExperimental: true,
    });
    wrapper.instance().onKeyPress(event);

    expect(expandedProps.onExpandChange).toHaveBeenCalled();
  });
});
